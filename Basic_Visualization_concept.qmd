---
title: "Making Plots with `ggplot2`"
format:
  html:
    smooth-scroll: true
    toc: true
    toc-location: right
    number-sections: false
    number-depth: 2
    css: styles.css
execute:
  echo: true
  warning: false
---

```{r}
library(tidyverse)
df <- read.csv("Mabangata_region_incidence2018.csv")
df$date_tested <- as.Date(df$date_tested,"%m/%d/%Y")
df_und5<- df %>% filter(age_group=="u5") 
```


## Main Objective

At the end of the training we will be able to produce this plot:

```{r}
ggplot(data=df,aes(x=date_tested, y= incidence))+
  geom_line(size=1.5,aes(color=age_group)) +
  geom_point( size=1.2)+
  labs(x="Month", 
       y="Incidence (Cases/100,000)",
       title="Malaria Incidence, Mabangata, 2018",
       color="Age Group") +
  theme_bw()+
  theme(plot.title = element_text(hjust=0.5),
        axis.text.x = element_text(angle=45,hjust=1)) +
  scale_x_date(date_breaks = "1 month", date_labels = "%B")
```

## `ggplot2`: A Layered Approach to Plotting

::: callout-tip
### Aim:
-   Learn about the layered approach of ggplot.
-   Understand how each layer adds elements to the plot.
:::

The `ggplot` library is a powerful tool for creating data visualizations in R. It follows a layered approach to building plots, where each layer adds additional elements to the plot. Understanding how ggplot works can help you create sophisticated and informative visualizations.

In ggplot, you start with a base plot and add layers called "geometries", or `geom`s. Each layer in ggplot adds a different aspect to the plot, allowing you to customize and enhance the visualization. Once geoms have been added, labels and other customizations can be added in a similar way.

::: panel-tabset

### Base Plot: No Information

Every plot in ggplot starts with the function `ggplot`. With no additional information about what to display, it will simply show a grey box:

```{r}
ggplot()
```

### Base Plot: With Data

The ggplot function must include an argument to the dataset we want to plot. Here, we specify that we want to use the `df_und5` dataset. But because we have not told the function *which* columns to plot, it will still only show a grey box:

```{r}
ggplot(data = df_und5)
```


### Base Plot: With `x` and `y`

Let's say we want to plot the `date_tested` and `incidence` columns, with `date_tested` on the x axis and `incidence` on the y axis. For this, we have to use a function called `aes()`. We'll explain it later, but for now just type in the code. Now, on top of our grey box, there is a layer showing some line breaks and labels mapping our x and y variables. Progress!

```{r}
ggplot(data = df_und5, aes(x = date_tested, y = incidence))
```

### Adding Points

Now we're finally ready to add shapes to our plot using `geom`s. If we want to represent this data using *points* we use the function `geom_point()`:

```{r}
ggplot(data=df_und5, aes(x=date_tested, y=incidence)) +
  geom_point()
```

### Adding Lines

As an additional layer on top of this, we use the function `geom_line()` to add a line plot:

```{r}
ggplot(data=df_und5, aes(x=date_tested, y=incidence)) +
  geom_point() +
  geom_line()
```

:::

The order in which you append your geoms to the main `ggplot` function matters: whatever you list first will go underneath whatever comes next. For example, observe the difference between these two pieces of code and the plots they produce:

```{r}
ggplot(data=df_und5, aes(x=date_tested, y=incidence)) +
  geom_line(size=2) +
  geom_point(colour="red", size=4) 

ggplot(data=df_und5, aes(x=date_tested, y=incidence)) +
  geom_point(colour="red", size=4) +
  geom_line(size=2)
```

::: callout-tip
### Note:

It's easy and fun to switch layers around in ggplot, but watch out for any dangling `+` signs at the end of your plots! If you leave a `+` dangling at the end like this, your code will think that you're still typing your command and won't show your plot:

```
ggplot(data=df_und5, aes(x=date_tested, y=incidence)) +
  geom_line(size=2) +
  geom_point(colour="red", size=4) +
```

Conversely, if you miss a `+` in the middle, your code will only show you the first part of your plot, then throw an error:

```
ggplot(data=df_und5, aes(x=date_tested, y=incidence)) +
  geom_line(size=2) 
  geom_point(colour="red", size=4) 
```

:::


::: callout-tip
### Layering Exercise

Change the code below so that the orange points are in front of the blue lines. Watch out for any missing or dangling `+` signs!

```{r}
ggplot(data=df_und5, aes(x=date_tested, y=incidence)) +
  geom_point(colour="orange", size=4) + 
  geom_line(colour="blue", size=2) 
```
:::


## Customizing `geom`s

::: callout-tip
### Aim:
-   Adjust the color, size, shape, and linetype of geom features
:::

As we've hinted at already in the plots above, you can change the features of your `geom`s by adding arguments inside of their specific functions. You can see the defaults if you enter these geoms with no additonal arguments:

```{r}
ggplot(data=df_und5, aes(x=date_tested, y=incidence)) +
  geom_line() + 
  geom_point() 
```

Some features, such as color and size, are used by both `geom_point()` and `geom_line()`:

```{r}
ggplot(data=df_und5, aes(x=date_tested, y=incidence)) +
  geom_line(colour="blue", size=2) 

ggplot(data=df_und5, aes(x=date_tested, y=incidence)) +
  geom_point(colour="red", size=3)  

```

Others are specific to specific geoms, as in the examples below:

::: panel-tabset

## `linetype` for Lines

Options include "blank", "solid", "dashed", "dotted", "dotdash", "longdash", and "twodash".

```{r}
ggplot(data = df_und5, aes(x = date_tested, y = incidence))+ 
  geom_line(colour="blue", size=2, linetype="dashed")
```

```{r}

ggplot(data = df_und5, aes(x = date_tested, y = incidence))+ 
  geom_line(colour="blue",size=2,linetype="dotted")
```

## `shape` for Points

Shapes can take any number from 1 to 25. 

```{r}
ggplot(data = df_und5, aes(x = date_tested, y = incidence))+ 
  geom_point(colour="red", size=3, shape=2)
```

```{r}

ggplot(data = df_und5, aes(x = date_tested, y = incidence))+ 
  geom_point(colour="red", size=3, shape=4)
```

:::

You can layer these as before:

```{r}

ggplot(data = df_und5, aes(x = date_tested, y = incidence))+ 
  geom_line(colour="blue",size=2,linetype="dotted") +
  geom_point(colour="red", size=3, shape=4)
```


::: callout-tip
### Exercise:

Modify the code below so that:

- the line is orange, dashed, and size 2
- the points are green, shape 16, and size 4

```{r}
ggplot(data = df_und5, aes(x = date_tested, y = incidence))+ 
  geom_line(colour="blue",size=2,linetype="dotted") +
  geom_point(colour="red", size=3, shape=4)
```

### Solution
```{r}
ggplot(data = df_und5, aes(x = date_tested, y = incidence))+ 
  geom_line(colour="orange",size=2,linetype="dashed") +
  geom_point(colour="green", size=4, shape=16)
```
:::

## Mapping Aesthetics with the `aes()` Function

::: callout-tip
### Aim:

-   Understand the role of the aes function in ggplot.
-   Learn when to use aes to map variables to aesthetics.
:::

In the presentation, we learned that all visualizations are **mappings** of information from  abstract numbers into visual concepts like location, shape, color, etc.

The `aes()` function is used whenever we want to map variables in our dataset to aesthetic properties such as x and y axes, colors, shapes, etc. It is one of the most confusing aspects of ggplot, but also one of the most powerful once you get used to it. 

### `x` and `y`

`aes()` can take many arguments (see the documentation for a full list), but you've already seen the most crucial ones: `x` and `y`. These arguments are always necessary for ggplot to understand which variables to show on the two-dimensional screen.

::: panel-tabset
### Switching `x` and `y`

the aes in the base position and altering the variables of x axis and y axis

```{r}
ggplot(data = df_und5, aes(x = date_tested, y = incidence)) +
    geom_point()
```

```{r}
ggplot(data = df_und5, aes(x = incidence, y = date_tested,)) +
    geom_point()
```

### Different `x` and `y`

```{r}
ggplot(data = df_und5, aes(x = date_tested, y = pop)) +
    geom_point()

```

:::


::: callout-tip
### `x` and `y` Exercise

Create a scatter plot using the `df_und5` dataset, with date (`date_tested`) on the x axis and  confirmed cases (`conf`) on the y axis.
:::


### Color

::: panel-tabset
### inside and outside the eas

```{r}
ggplot(data = df, aes(x = date_tested, y = incidence),color = "green") +
  geom_point( )
```

```{r}
ggplot(data = df, aes(x = date_tested, y = incidence)) +
  geom_point(color = "green" )
```

```{r}
ggplot(data = df, aes(x = date_tested, y = incidence,color = "blue")) +
  geom_point( )
```

::: callout-tip
### Tutorial:

change the incidence scatter plot to color blue
:::

```{r}
ggplot(data = df, aes(x = date_tested, y = incidence),color = age_group) +
  geom_point( )
```

```{r}
ggplot(data = df, aes(x = date_tested, y = incidence, color = age_group)) +
  geom_point()
```

```{r}
ggplot(data = df, aes(x = date_tested, y = conf, color = age_group)) +
  geom_point()
```

::: callout-tip
### Tutorial:

Produce the following plot:

![](images/out2.png) (Hint : data - df, y = confirmed cases, x = date_tested)
:::

when the color option is not categorical but numeric then it indicates the level

```{r}
ggplot(data = df_und5, aes(x = date_tested, y = incidence, color = incidence)) +
  geom_point()
```
:::




## Scatter Plots

::: callout-tip
### Aim:

Understand the structure of a scatter plot using ggplot.

Adjust point properties such as color, size, and transparency.
:::

::: panel-tabset
## simple scatter plot

```{r}
ggplot(data=df_und5, aes(x=date_tested, y= incidence))+ 
  geom_point()
```

## customize the points

```{r}
ggplot(data=df_und5, aes(x=date_tested, y= incidence)) + 
  geom_point(colour="blue",size=3.2,alpha=0.9, shape=2)
```

being specific according to your data when customizing

```{r}
ggplot(data=df,aes(x=date_tested,y=incidence))+
  geom_point(aes(shape=age_group))

```

```{r}
ggplot(data=df,aes(x=date_tested,y=incidence))+
  geom_point(aes(size=incidence,shape=age_group))
```
:::

Scatter plots are useful for visualizing the relationship between two continuous variables.

In this example, we're using the geom_point() geometry to create a scatter plot.Each point represents a single data observation, with one variable plotted against the other.

You can customize various aspects of the scatter plot points using arguments within the geom_point() function.For example, you can change the color, size, and transparency of the points to highlight certain patterns or trends in the data.

::: callout-tip
### Tutorial:

1.  Write a code snippet to create a scatter plot as shown in the image below. (Hint: use the df dataset with changing color aesthentic)

![](images/out1.png)

2.  Create a scatter plot for confirmed cases in the Y axis and date_tested x axis with shapes of age_group and size of confirmed cases
:::

## Layering Line and Scatter Plots

::: callout-tip
### Aim:

Understand how to combine line and scatter plots in ggplot. Visualize trends and individual data points simultaneously.
:::

Combining line and scatter plots allows you to display both trend information (through the line) and individual data points (through the scatter). This is useful for scenarios where you want to show both the overall trend and the variability of the data points around that trend.

```{r}
##line and point
ggplot(data=df_und5, aes(x=date_tested, y= incidence))+
  geom_line(size=1,colour="red")+
  geom_point(colour="blue",size=3.2,alpha=1.7, shape=2)
```

::: callout-tip
### Tutorial:

1.  Write a code snippet to create a combined plot showing confirmed cases. (Adjust the color of points to green and line to dashed)

2.  Replicate the following plot

![](images/out3.png)
:::





## Customizing Plots for Presentation and Publication

::: callout-tip
### Aim:

Learn how to customize plots for presentation and publication. Adjust plot elements such as titles, labels, themes, and scales.
:::

Customizing plots is essential for making them more visually appealing and informative for presentation or publication.

Elements such as titles, axis labels, and themes can be customized to enhance readability and aesthetics. Scales can be adjusted to ensure that the data is displayed in a clear and meaningful way.

```{r}
ggplot(data=df_und5, aes(x=date_tested, y= incidence))+
  geom_point(colour="blue", size=3.2)+
  geom_line()+
  labs(x="Date",y="Incidence for 100000/month",title="Malaria Incidence in Mabangata region,2018")+
  theme_bw()+
  theme(plot.title = element_text(hjust=0.5),
        axis.text.x=element_text(angle=45,hjust=1))+
  scale_x_date(date_breaks = "1 month", date_labels = "%B")

```

::: callout-tip
### Tutorial:

create the following plot

![](images/out4.png)
:::
