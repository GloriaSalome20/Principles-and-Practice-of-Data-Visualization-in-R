---
title: "Making Plots with `ggplot2`"
format:
  html:
    smooth-scroll: true
    toc: true
    toc-location: right
    number-sections: false
    number-depth: 2
    css: styles.css
execute:
  echo: true
  warning: false
---

```{r}
library(tidyverse)
df <- read.csv("Mabangata_region_incidence2018.csv")
df$date_tested <- as.Date(df$date_tested,"%m/%d/%Y")
df_und5<- df %>% filter(age_group=="u5") 
```


## Main Objective

At the end of the training we will be able to produce this plot:

```{r}
ggplot(data=df,aes(x=date_tested, y= incidence))+
  geom_line(size=1.5,aes(color=age_group)) +
  geom_point( size=1.2)+
  labs(x="Month", 
       y="Incidence (Cases/100,000)",
       title="Malaria Incidence, Mabangata, 2018",
       color="Age Group") +
  theme_bw()+
  theme(plot.title = element_text(hjust=0.5),
        axis.text.x = element_text(angle=45,hjust=1)) +
  scale_x_date(date_breaks = "1 month", date_labels = "%B")
```

## `ggplot2`: A Layered Approach to Plotting

::: callout-tip
### Aim:
-   Learn about the layered approach of ggplot.
-   Understand how each layer adds elements to the plot.
:::

The `ggplot` library is a powerful tool for creating data visualizations in R. It follows a layered approach to building plots, where each layer adds additional elements to the plot. Understanding how ggplot works can help you create sophisticated and informative visualizations.

In ggplot, you start with a base plot and add layers called "geometries", or `geom`s. Each layer in ggplot adds a different aspect to the plot, allowing you to customize and enhance the visualization. Once geoms have been added, labels and other customizations can be added in a similar way.

::: panel-tabset

### Base Plot: No Information

Every plot in ggplot starts with the function `ggplot`. With no additional information about what to display, it will simply show a grey box:

```{r}
ggplot()
```

### Base Plot: With Data

The ggplot function must include an argument to the dataset we want to plot. Here, we specify that we want to use the `df_und5` dataset. But because we have not told the function *which* columns to plot, it will still only show a grey box:

```{r}
ggplot(data = df_und5)
```


### Base Plot: With `x` and `y`

Let's say we want to plot the `date_tested` and `incidence` columns, with `date_tested` on the x axis and `incidence` on the y axis. For this, we have to use a function called `aes()`. We'll explain it later, but for now just type in the code. Now, on top of our grey box, there is a layer showing some line breaks and labels mapping our x and y variables. Progress!

```{r}
ggplot(data = df_und5, aes(x = date_tested, y = incidence))
```

### Adding Points

Now we're finally ready to add shapes to our plot using `geom`s. If we want to represent this data using *points* we use the function `geom_point()`:

```{r}
ggplot(data=df_und5, aes(x=date_tested, y=incidence)) +
  geom_point()
```

### Adding Lines

As an additional layer on top of this, we use the function `geom_line()` to add a line plot:

```{r}
ggplot(data=df_und5, aes(x=date_tested, y=incidence)) +
  geom_point() +
  geom_line()
```

:::

The order in which you append your geoms to the main `ggplot` function matters: whatever you list first will go underneath whatever comes next. For example, observe the difference between these two pieces of code and the plots they produce:

```{r}
ggplot(data=df_und5, aes(x=date_tested, y=incidence)) +
  geom_line(size=2) +
  geom_point(color="red", size=4) 

ggplot(data=df_und5, aes(x=date_tested, y=incidence)) +
  geom_point(color="red", size=4) +
  geom_line(size=2)
```

::: callout-tip
### Note:

It's easy and fun to switch layers around in ggplot, but watch out for any dangling `+` signs at the end of your plots! If you leave a `+` dangling at the end like this, your code will think that you're still typing your command and won't show your plot:

```
ggplot(data=df_und5, aes(x=date_tested, y=incidence)) +
  geom_line(size=2) +
  geom_point(color="red", size=4) +
```

Conversely, if you miss a `+` in the middle, your code will only show you the first part of your plot, then throw an error:

```
ggplot(data=df_und5, aes(x=date_tested, y=incidence)) +
  geom_line(size=2) 
  geom_point(color="red", size=4) 
```

:::



### Layering Exercise

Change the code below so that the orange points are in front of the blue lines. Watch out for any missing or dangling `+` signs!

```{r}
ggplot(data=df_und5, aes(x=date_tested, y=incidence)) +
  geom_point(color="orange", size=4) + 
  geom_line(color="blue", size=2) 
```



## Mapping Aesthetics with the `aes()` Function

::: callout-tip
### Aim:

-   Understand the role of the aes function in ggplot.

-   Learn when to use aes to map variables to aesthetics.
:::

The aes() function is used to map variables to aesthetic properties such as x and y axes, colors, shapes, etc.

Variables specified within the aes() function are mapped to aesthetics and can vary across data points.

It's important to keep variables that should vary across data points (e.g., data attributes) inside the aes() function.

::: panel-tabset
### Altering Variables

the aes in the base position and altering the variables of x axis and y axis

```{r}
ggplot(data = df, aes(x = date_tested, y = incidence)) +
    geom_point()
```

```{r}
ggplot(data = df, aes(y = date_tested, x = incidence)) +
    geom_point()
```

::: callout-tip
### Tutorial:

show a scatter plot with y axis being confirmed cases (conf) and x axis being dates
:::

### inside and outside the eas

```{r}
ggplot(data = df, aes(x = date_tested, y = incidence),color = "green") +
  geom_point( )
```

```{r}
ggplot(data = df, aes(x = date_tested, y = incidence)) +
  geom_point(color = "green" )
```

```{r}
ggplot(data = df, aes(x = date_tested, y = incidence,color = "blue")) +
  geom_point( )
```

::: callout-tip
### Tutorial:

change the incidence scatter plot to color blue
:::

```{r}
ggplot(data = df, aes(x = date_tested, y = incidence),color = age_group) +
  geom_point( )
```

```{r}
ggplot(data = df, aes(x = date_tested, y = incidence, color = age_group)) +
  geom_point()
```

```{r}
ggplot(data = df, aes(x = date_tested, y = conf, color = age_group)) +
  geom_point()
```

::: callout-tip
### Tutorial:

Produce the following plot:

![](images/out2.png) (Hint : data - df, y = confirmed cases, x = date_tested)
:::

when the color option is not categorical but numeric then it indicates the level

```{r}
ggplot(data = df_und5, aes(x = date_tested, y = incidence, color = incidence)) +
  geom_point()
```
:::

## Line Plots

::: callout-tip
### Aim:

-   Create a basic line plot using ggplot.

-   Elaborate the additional group=1 aesthetic

-   Explore customization options by adjusting line properties such as size, color, and line type.
:::

::: panel-tabset
## simple line plot

```{r}
ggplot(data = df_und5, aes(x = date_tested, y = incidence)) +
    geom_line( )
```

```{r}
ggplot(data = df_und5, aes(x = date_tested, y = conf)) +
    geom_line( )
```

## customize the line

```{r}
ggplot(data = df_und5, aes(x = date_tested, y = incidence))+ 
  geom_line(size=1,colour="blue",linetype="dashed")
```

```{r}

ggplot(data = df_und5, aes(x = date_tested, y = incidence))+ 
  geom_line(size=2,colour="blue",linetype="dotted")
```
:::

In this example, we're using the *geom_line()* geometry to create a line plot.

We specify the x-axis variable (*date_tested*) and the y-axis variable (*incidence*) within the *aes()* function. This creates a line plot showing how the incidence variable changes over time.

You can customize various aspects of the line plot using arguments within the *geom_line()* function. For example, you can change the size of the line, its color, and even its line type ("blank", "solid", "dashed", "dotted", "dotdash", "longdash", and "twodash"). These customizations help to improve the readability and aesthetics of the plot.

::: callout-tip
### Tutorial:

Write a code snippet to create a basic line plot to visualize population, then customize the appearance of the line color to a red dashed line (Hint: use a df_und5 data).
:::

::: callout-tip
### Back to Layering

On changing the size of line to see how points cant be visible

```{r}
ggplot(data=df_und5, aes(x=date_tested, y=incidence)) +
  geom_point() +
  geom_line(color="red",size=2)

```

on the improvement of the previous then

```{r}
layered<- ggplot(data= df_und5,aes(x=date_tested,y=incidence))+
  geom_line(color="red",size=2)+
  geom_point()
layered
```
:::

## Scatter Plots

::: callout-tip
### Aim:

Understand the structure of a scatter plot using ggplot.

Adjust point properties such as color, size, and transparency.
:::

::: panel-tabset
## simple scatter plot

```{r}
ggplot(data=df_und5, aes(x=date_tested, y= incidence))+ 
  geom_point()
```

## customize the points

```{r}
ggplot(data=df_und5, aes(x=date_tested, y= incidence)) + 
  geom_point(colour="blue",size=3.2,alpha=0.9, shape=2)
```

being specific according to your data when customizing

```{r}
ggplot(data=df,aes(x=date_tested,y=incidence))+
  geom_point(aes(shape=age_group))

```

```{r}
ggplot(data=df,aes(x=date_tested,y=incidence))+
  geom_point(aes(size=incidence,shape=age_group))
```
:::

Scatter plots are useful for visualizing the relationship between two continuous variables.

In this example, we're using the geom_point() geometry to create a scatter plot.Each point represents a single data observation, with one variable plotted against the other.

You can customize various aspects of the scatter plot points using arguments within the geom_point() function.For example, you can change the color, size, and transparency of the points to highlight certain patterns or trends in the data.

::: callout-tip
### Tutorial:

1.  Write a code snippet to create a scatter plot as shown in the image below. (Hint: use the df dataset with changing color aesthentic)

![](images/out1.png)

2.  Create a scatter plot for confirmed cases in the Y axis and date_tested x axis with shapes of age_group and size of confirmed cases
:::

## Layering Line and Scatter Plots

::: callout-tip
### Aim:

Understand how to combine line and scatter plots in ggplot. Visualize trends and individual data points simultaneously.
:::

Combining line and scatter plots allows you to display both trend information (through the line) and individual data points (through the scatter). This is useful for scenarios where you want to show both the overall trend and the variability of the data points around that trend.

```{r}
##line and point
ggplot(data=df_und5, aes(x=date_tested, y= incidence))+
  geom_line(size=1,colour="red")+
  geom_point(colour="blue",size=3.2,alpha=1.7, shape=2)
```

::: callout-tip
### Tutorial:

1.  Write a code snippet to create a combined plot showing confirmed cases. (Adjust the color of points to green and line to dashed)

2.  Replicate the following plot

![](images/out3.png)
:::

## Customizing Plots for Presentation and Publication

::: callout-tip
### Aim:

Learn how to customize plots for presentation and publication. Adjust plot elements such as titles, labels, themes, and scales.
:::

Customizing plots is essential for making them more visually appealing and informative for presentation or publication.

Elements such as titles, axis labels, and themes can be customized to enhance readability and aesthetics. Scales can be adjusted to ensure that the data is displayed in a clear and meaningful way.

```{r}
ggplot(data=df_und5, aes(x=date_tested, y= incidence))+
  geom_point(colour="blue", size=3.2)+
  geom_line()+
  labs(x="Date",y="Incidence for 100000/month",title="Malaria Incidence in Mabangata region,2018")+
  theme_bw()+
  theme(plot.title = element_text(hjust=0.5),
        axis.text.x=element_text(angle=45,hjust=1))+
  scale_x_date(date_breaks = "1 month", date_labels = "%B")

```

::: callout-tip
### Tutorial:

create the following plot

![](images/out4.png)
:::
