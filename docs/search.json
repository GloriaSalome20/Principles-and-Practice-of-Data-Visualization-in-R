[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Training Information",
    "section": "",
    "text": "The goal of this workshop is to equip participants with the ability to recognize and produce data visualizations in accordance with the best practices of the field. Looking forward to meeting you all!\n\n\nThe workshop takes place at the Kigali Marriott Hotel in Kigali, Rwanda on the 19th April.\n\n\n\nPlease try to have these installed before the training, if you have any trouble installing we will have a station on 18th April where you can come for assistance (The steps migt take approximately 15 minutes).\n\nInstall R\nInstall and setup RStudio Desktop\nlibraries\n\n\n\n\n\n\n\nnote\n\n\n\n\nAll software used in this workshop are free.\nIf you have any difficulties with the installation, support can be provided on the first day of the AMMnet meeting or before the session or during breaks.\n\n\n\n\n\n\n\n\n\n\n\n\nTable 1: Overview Schedule\n\n\n\n\n\n\n\nTime\nSession\n\n\n\n\n\n15min before\nWelcome\nSupport for software installation\n\n\n\n9:30 - 9:50\nIntroduction to data Visualization presentation\n\n\n\n9:50-10:20\nIntroduction to R Studio, Reading Data, GGplot\n\n\n\n10:20-11:00\nLine Plot, Scatter Plots and Exercise\n\n\n\n30min\ncoffee Break\n\n\n\n11:30-12:10\ncombination of line and Scatter & Exercise\n\n\n\n12:10-13:00\nWinding up session & survey filling\n\n\n\n\n\n\n\n\n\n\nFill out the online post-workshop questionnaire"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Preparations_before_visualization.html#creating-a-new-r-script",
    "href": "Preparations_before_visualization.html#creating-a-new-r-script",
    "title": "Visualization",
    "section": "Creating a new R Script",
    "text": "Creating a new R Script\n\n\n\n\n\n\nAim:\n\n\n\nUnderstanding how to create and save a new R script file in RStudio.\n\n\n\nStep1Step 2\n\n\nGo to file &gt; New file &gt; R Script\n\n\n\nSave your R script in the folder of desired directory"
  },
  {
    "objectID": "Preparations_before_visualization.html#understanding-r-panes",
    "href": "Preparations_before_visualization.html#understanding-r-panes",
    "title": "Visualization",
    "section": "Understanding R Panes",
    "text": "Understanding R Panes\n\n\n\n\n\n\nAim:\n\n\n\nFamiliarize yourself with the different panes in RStudio and their respective functionalities.\n\n\n\nScript PaneConsole PaneEnvironment PanePlots, Files, and Viewer Pane\n\n\nThe Script Pane is where you write and edit your R code. It’s essentially your coding workspace. Here, you can create new scripts, open existing ones, and write or edit R code to perform various tasks like data manipulation, analysis, and visualization.\n\n\n\nHere, you can execute temporary code snippets. The Console Pane is where R executes your code and displays the output. When you run code from the Script Pane, the results, errors, and messages are displayed in the Console Pane. It’s an interactive interface where you can directly interact with R, execute commands, and see immediate results. \n\n\nThe Environment Pane provides a snapshot of your current R environment. It displays information about the objects (variables, functions, data frames) that are currently loaded into your R session. You can see the names, types, dimensions, and values of these objects. This pane is particularly useful for inspecting and managing your workspace during data analysis.\n\n\n\nThis pane serves multiple purposes:\nPlots: When you create plots in R, they are displayed in the Plots Pane. You can interact with the plots, zoom in/out, save them, or export them as images.\nFiles: The Files Pane provides a file browser within RStudio. You can navigate through your directory structure, open files, create new ones, and manage your project files directly from this pane.\nViewer: The Viewer Pane displays HTML content generated by R, such as R Markdown documents, Shiny applications, or HTML visualizations. It allows you to preview these documents within RStudio."
  },
  {
    "objectID": "Preparations_before_visualization.html#managing-libraries",
    "href": "Preparations_before_visualization.html#managing-libraries",
    "title": "Visualization",
    "section": "Managing Libraries",
    "text": "Managing Libraries\n\n\n\n\n\n\nAim:\n\n\n\nLearn how to load and manage libraries for additional functionalities in R.\n\n\nEnsure to call out libraries responsible for the task aimed to achieve. for visualization ggplot will be used and tidyvers for data reading and exploration/Manipulation.\n\n# Load required libraries\n library(ggplot2)\n library(tidyverse)"
  },
  {
    "objectID": "Preparations_before_visualization.html#reading-data",
    "href": "Preparations_before_visualization.html#reading-data",
    "title": "Visualization",
    "section": "Reading data",
    "text": "Reading data\n\n\n\n\n\n\nAim:\n\n\n\nUnderstand how to import data into R from various file formats on different directories.\n\n\nYou can read data from various file formarts like csv, excel and others.\nReading CSV Files\n\nStep 1Step 2\n\n\nEnsure you save your data and R script in same folder\n\n# Read CSV file\ndf &lt;- read.csv(\"Mabangata_region_incidence2018.csv\")\n\n\n\nWhen not in the same folder then copy the path/directory of the file\n\n# Read CSV file from a different folder\n# df&lt;- read.csv(\"C:/Users/shirgl/Desktop/SwissTPH/conferences&presentations/Ammnet/training materials/data_malariaAtlas/Mabangata_region_incidence2018.csv\")\n\n\n\n\nReading Other File Formats\n\nexcelStata (Dta)\n\n\n\n# Load library for Excel\n# library(readxl)\n# Read Excel file\n# read_excel()\n\n\n\n\n# Load library for Stata\n# library(haven)\n# Read Stata file\n# read.dta()\n\n\n\n\n\ndata manipulation to choose the data of under five and convert to date format\n\ndf$date_tested &lt;- as.Date(df$date_tested,\"%m/%d/%Y\")\ndf_und5&lt;- df %&gt;% filter(age_group==\"u5\")"
  },
  {
    "objectID": "combined_file.html",
    "href": "combined_file.html",
    "title": "Training Information",
    "section": "",
    "text": "The goal of this workshop is to equip participants with the ability to recognize and produce data visualizations in accordance with the best practices of the field. Looking forward to meeting you all!\n\n\nThe workshop takes place at .. Hotel. The conference room is … Hall.\n\n\n\nPlease try to have these installed before the training, if you have any trouble installing we will have a station on 18th April where you can come for assistance (The steps migt take approximately 15 minutes).\na.  [Install R]( )\n\nb.  [Install and setup RStudio Desktop]( )\n\nc.  [libraries]( )\n\n\n\n\n\n\nnote\n\n\n\n\nAll software used in this workshop are free.\nIf you have any difficulties with the installation, support can be provided on the first day of the AMMnet meeting or before the session or during breaks.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTable 1: Overview Schedule\n\n\n\n\n\n\n\n\n\n\nTime\nSession\n\n\n\n\n\n15min before\nWelcome\nSupport for software installation\n\n\n\n15min\nIntroduction to data Visualization presentation\n\n\n\n30min\nIntroduction to R Studio, Reading Data, GGplot\n\n\n\n30min\ncoffee Break\n\n\n\n50min\nLine Plot, Scatter Plots and Exercise\n\n\n\n30min\ncombination of line and Scatter & Exercise\n\n\n\n20min\nWinding up session & survey filling\n\n\n\n\n\n\n\n\n\n\n\n\nFill out the online post-workshop questionnaire (link to be provided after the workshop)"
  },
  {
    "objectID": "combined_file.html#venue",
    "href": "combined_file.html#venue",
    "title": "Training Information",
    "section": "",
    "text": "The workshop takes place at .. Hotel. The conference room is … Hall."
  },
  {
    "objectID": "combined_file.html#before-the-workshop",
    "href": "combined_file.html#before-the-workshop",
    "title": "Training Information",
    "section": "",
    "text": "Please try to have these installed before the training, if you have any trouble installing we will have a station on 18th April where you can come for assistance (The steps migt take approximately 15 minutes).\na.  [Install R]( )\n\nb.  [Install and setup RStudio Desktop]( )\n\nc.  [libraries]( )\n\n\n\n\n\n\nnote\n\n\n\n\nAll software used in this workshop are free.\nIf you have any difficulties with the installation, support can be provided on the first day of the AMMnet meeting or before the session or during breaks."
  },
  {
    "objectID": "combined_file.html#friday-april-19th",
    "href": "combined_file.html#friday-april-19th",
    "title": "Training Information",
    "section": "",
    "text": "Table 1: Overview Schedule\n\n\n\n\n\n\n\n\n\n\nTime\nSession\n\n\n\n\n\n15min before\nWelcome\nSupport for software installation\n\n\n\n15min\nIntroduction to data Visualization presentation\n\n\n\n30min\nIntroduction to R Studio, Reading Data, GGplot\n\n\n\n30min\ncoffee Break\n\n\n\n50min\nLine Plot, Scatter Plots and Exercise\n\n\n\n30min\ncombination of line and Scatter & Exercise\n\n\n\n20min\nWinding up session & survey filling"
  },
  {
    "objectID": "combined_file.html#after-the-workshop",
    "href": "combined_file.html#after-the-workshop",
    "title": "Training Information",
    "section": "",
    "text": "Fill out the online post-workshop questionnaire (link to be provided after the workshop)"
  },
  {
    "objectID": "combined_file.html#installing-r",
    "href": "combined_file.html#installing-r",
    "title": "Training Information",
    "section": "Installing R",
    "text": "Installing R\nR is a powerfull programming language for statistical computing and graphics. It is one of main programming language used for data science (with other programming languages such as Python and Julia).\n\nStep 1Step 2Step 3Step 4Step 5Step 6\n\n\nDOWNLOAD R\nVisit the Comprehensive R Archive Network (CRAN) to download R which is a network of servers around the world that store identical up-to-date versions of code and documentation for R. \n Scroll down the page to locate the mirror that is the closest to your geographic location and click on its URL.\n\n\n\n\n\n\nTip\n\n\n\nSelecting a mirror that is close to you may help speed up the download. You can still use another mirror since the closest geographic location does not always give the best mirror.\n\n\nFor instance, when downloading R from Rwanda, you can select the mirror from South Africa.\n\n\nCHOOSE YOUR OPERATION SYSTEM\nOnce on the CRAN page, select your operating system: Linux, macOS, or Windows. \n\n\n\nSelect binaries for base distribution\n\n\n\n\nDOWNLOAD THE INSTALLER\nDownload the R installer (&lt; 80 MB)\n\n\n\n\nRUN THE INSTALLER\nLocate the downloaded file in your computer’s Downloads folder and double-click to run the installation wizard.\n\n\n\n\nCOMPLETE INSTALLATION\nFollow the instruction in the installation wizard to complete the installation."
  },
  {
    "objectID": "combined_file.html#install-and-setup-rstudio-desktop",
    "href": "combined_file.html#install-and-setup-rstudio-desktop",
    "title": "Training Information",
    "section": "Install and setup RStudio Desktop",
    "text": "Install and setup RStudio Desktop\nRstudio is an integrated development environment (IDE) for R, providing a user-friendly interface for R programming.\n\n\n\n\n\n\nNote\n\n\n\nRStudio is moving away from its R-exclusive focus and becoming Posit in October 2022 to enable broader data science, scientific research, and technical communication functionalities and, in particular, to integrate Python users.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIn order for RStudio desktop to work with R you must have installed R on your computer, see Section A.1. RStudio does not include R when you download and install it.\n\n\n\nStep 1Step 2Step 3Step 4Step 5Step 6\n\n\nDOWNLOAD RStudio\nYou can download R from the RStudio website. There are different RStudio products available, but the free Desktop version offers all necessary features for your analyses.\n\n\n\nCHOOSE YOUR OPERATION SYSTEM\nDownload the RStudio Desktop installer compatible with your operating system.\n\n\n\nRUN THE INSTALLER\nLocate the downloaded file in your computer’s Downloads folder and double-click to run the setup.\n\n\n\nCOMPLETE INSTALLATION\nFollow the instruction in the installation wizard to complete the installation process.\n\n\n\nCONFIGURATION\nAfter installing RStudio, open the application. Navigate to Tools &gt; Global options to set your preferences.\n\n\n\nUnder the General options and the Basic tab:\nWorkspace\nUncheck Restore .RData into workspace at startup\nEnsure that Never is selected for Save workspace to .RData on exit.\nHistory\nUncheck Always save history (even when not saving .RData)\nUncheck Remove duplicate entries in history"
  },
  {
    "objectID": "combined_file.html#installing-r-packages",
    "href": "combined_file.html#installing-r-packages",
    "title": "Training Information",
    "section": "Installing R packages",
    "text": "Installing R packages\n\n\n\n\n\n\nNote\n\n\n\nA R package is a collection of functions, data, and compiled code in a well-defined format, created to add specific functionality to R.\nThere are 10,000+ user contributed packages and growing.\nThere is a set of standard (or base) packages which is considered part of the R source code and automatically available as part of your R installation. Base packages contain the basic functions that allow R to work, and enable standard statistical and graphical functions on data sets.\n\n\n\nStep 1Step 2Step 3\n\n\nOpen RStudio on your computer\n\n\nIn RStudio, you can install a new package by selecting Tools &gt; Install packages… \n\n\nEnter the name of the package you want to install, or browse through available packages. Select the desired package(s) and click Install to add them to your R environment."
  },
  {
    "objectID": "combined_file.html#creating-a-new-r-script",
    "href": "combined_file.html#creating-a-new-r-script",
    "title": "Training Information",
    "section": "Creating a new R Script",
    "text": "Creating a new R Script\n\n\n\n\n\n\nAim:\n\n\n\nUnderstanding how to create and save a new R script file in RStudio.\n\n\n\nStep1Step 2\n\n\nGo to file &gt; New file &gt; R Script\n\n\n\nSave your R script in the folder of desired directory"
  },
  {
    "objectID": "combined_file.html#understanding-r-panes",
    "href": "combined_file.html#understanding-r-panes",
    "title": "Training Information",
    "section": "Understanding R Panes",
    "text": "Understanding R Panes\n\n\n\n\n\n\nAim:\n\n\n\nFamiliarize yourself with the different panes in RStudio and their respective functionalities.\n\n\n\nScript PaneConsole PaneEnvironment PanePlots, Files, and Viewer Pane\n\n\nThe Script Pane is where you write and edit your R code. It’s essentially your coding workspace. Here, you can create new scripts, open existing ones, and write or edit R code to perform various tasks like data manipulation, analysis, and visualization.\n\n\n\nHere, you can execute temporary code snippets. The Console Pane is where R executes your code and displays the output. When you run code from the Script Pane, the results, errors, and messages are displayed in the Console Pane. It’s an interactive interface where you can directly interact with R, execute commands, and see immediate results. \n\n\nThe Environment Pane provides a snapshot of your current R environment. It displays information about the objects (variables, functions, data frames) that are currently loaded into your R session. You can see the names, types, dimensions, and values of these objects. This pane is particularly useful for inspecting and managing your workspace during data analysis.\n\n\n\nThis pane serves multiple purposes:\nPlots: When you create plots in R, they are displayed in the Plots Pane. You can interact with the plots, zoom in/out, save them, or export them as images.\nFiles: The Files Pane provides a file browser within RStudio. You can navigate through your directory structure, open files, create new ones, and manage your project files directly from this pane.\nViewer: The Viewer Pane displays HTML content generated by R, such as R Markdown documents, Shiny applications, or HTML visualizations. It allows you to preview these documents within RStudio."
  },
  {
    "objectID": "combined_file.html#managing-libraries",
    "href": "combined_file.html#managing-libraries",
    "title": "Training Information",
    "section": "Managing Libraries",
    "text": "Managing Libraries\n\n\n\n\n\n\nAim:\n\n\n\nLearn how to load and manage libraries for additional functionalities in R.\n\n\nEnsure to call out libraries responsible for the task aimed to achieve. for visualization ggplot will be used and tidyvers for data reading and exploration/Manipulation.\n\n# Load required libraries\n library(ggplot2)\n library(tidyverse)"
  },
  {
    "objectID": "combined_file.html#reading-data",
    "href": "combined_file.html#reading-data",
    "title": "Training Information",
    "section": "Reading data",
    "text": "Reading data\n\n\n\n\n\n\nAim:\n\n\n\nUnderstand how to import data into R from various file formats on different directories.\n\n\nYou can read data from various file formarts like csv, excel and others.\nReading CSV Files\n\nStep 1Step 2\n\n\nEnsure you save your data and R script in same folder\n\n# Read CSV file\ndf &lt;- read.csv(\"Mabangata_region_incidence2018.csv\")\n\n\n\nWhen not in the same folder then copy the path/directory of the file\n\n# Read CSV file from a different folder\n# df&lt;- read.csv(\"C:/Users/shirgl/Desktop/SwissTPH/conferences&presentations/Ammnet/training materials/data_malariaAtlas/Mabangata_region_incidence2018.csv\")\n\n\n\n\nReading Other File Formats\n\nexcelStata (Dta)\n\n\n\n# Load library for Excel\n# library(readxl)\n# Read Excel file\n# read_excel()\n\n\n\n\n# Load library for Stata\n# library()\n# Read Stata file\n# read.dta()\n\n\n\n\n\ndata manipulation to choose the data of under five and convert to date format\n\ndf$date_tested &lt;- as.Date(df$date_tested,\"%m/%d/%Y\")\ndf_und5&lt;- df %&gt;% filter(age_group==\"u5\") \n\n\n# Load required libraries\n library(ggplot2)\n library(tidyverse)\n df &lt;- read.csv(\"Mabangata_region_incidence2018.csv\")\n df$date_tested &lt;- as.Date(df$date_tested,\"%m/%d/%Y\")\n df_und5&lt;- df %&gt;% filter(age_group==\"u5\")"
  },
  {
    "objectID": "combined_file.html#layers-in-ggplot",
    "href": "combined_file.html#layers-in-ggplot",
    "title": "Training Information",
    "section": "Layers in ggplot",
    "text": "Layers in ggplot\n\n\n\n\n\n\nAim:\n\n\n\nLearn about the layered approach of ggplot. Understand how each layer adds elements to the plot.\n\n\nggplot operates on a layered grammar of graphics, where you start with a base plot and add layers of data, aesthetics, and geometries. Each layer in ggplot adds a different aspect to the plot, allowing you to customize and enhance the visualization.\n\nbase plotAdding pointsAdding Vertical lineAdding title\n\n\n\nbase_plot &lt;- ggplot(data = df_und5, aes(x = date_tested, y = incidence))\n\n\n\n\nlayered_plot &lt;- base_plot +\n  geom_point()\n\n\n\n\nlayered_vline&lt;- layered_plot +\n  geom_vline(xintercept = as.numeric(as.Date('2018-05-01')))\n\n\n\n\nlayered_vline + labs(title = \"Mabangata incidence 2018\")"
  },
  {
    "objectID": "combined_file.html#the-aes-function",
    "href": "combined_file.html#the-aes-function",
    "title": "Training Information",
    "section": "The aes Function",
    "text": "The aes Function\n\n\n\n\n\n\nAim:\n\n\n\nUnderstand the role of the aes function in ggplot. Learn when to use aes to map variables to aesthetics.\n\n\nThe aes() function is used to map variables to aesthetic properties such as x and y axes, colors, shapes, etc.\nVariables specified within the aes() function are mapped to aesthetics and can vary across data points.\nIt’s important to keep variables that should vary across data points (e.g., data attributes) inside the aes() function.\n\npositioninginside and outside the eas\n\n\nthe aes in the base or geom\n\nggplot(data = df, aes(x = date_tested, y = incidence)) +\n    geom_point()+\n  geom_line()\n\n\n\n\n\n\n\n\n\n# ggplot(data = df) +\n#   geom_point( aes(x = date_tested, y = incidence))+\n#   geom_line()\n\n\nggplot(data = df) +\n  geom_point( aes(x = date_tested, y = incidence))+\n  geom_line(aes(x = date_tested, y = conf))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = df, aes(x = date_tested, y = incidence),color = age_group) +\n  geom_point( )\n\n\n\n\n\n\n\n\n\nggplot(data = df, aes(x = date_tested, y = incidence, color = age_group)) +\n  geom_point()\n\n\n\n\n\n\n\n\nwhen the color option is not categorical but numeric then it indicates the level\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence, color = incidence)) +\n  geom_point()\n\n\n\n\n\n\n\n\n??scale_color_distiller, gradient"
  },
  {
    "objectID": "combined_file.html#customization-and-layering",
    "href": "combined_file.html#customization-and-layering",
    "title": "Training Information",
    "section": "Customization and Layering",
    "text": "Customization and Layering\n\n\n\n\n\n\nAim:\n\n\n\nExplore customization options in ggplot. Understand how to layer multiple elements in a plot.\n\n\nggplot allows for extensive customization of plots, including changing colors, sizes, labels, and more.\nYou can layer multiple geometries (e.g., points, lines) and additional elements (e.g., labels, titles) onto a single plot to create complex visualizations.\nLayers are added sequentially, with each layer building on top of the previous ones, allowing for fine-grained control over the plot’s appearance.\n\n# # Customizing and layering\n# ggplot(data = my_data, aes(x = x_variable, y = y_variable)) +\n#   geom_point() +  # Add points\n#   geom_smooth(method = \"lm\") +  # Add regression line\n#   labs(title = \"Scatter plot with Regression Line\", x = \"X-axis label\", y = \"Y-axis label\")  # Add title and axis labels"
  },
  {
    "objectID": "combined_file.html#creating-a-line-plot",
    "href": "combined_file.html#creating-a-line-plot",
    "title": "Training Information",
    "section": "Creating a Line Plot",
    "text": "Creating a Line Plot\n\n\n\n\n\n\nAim:\n\n\n\nCreate a basic line plot using ggplot.\nExplore customization options by adjusting line properties such as size, color, and line type.\n\n\n\nsimple line plotcustomize the line\n\n\nwhy keeping group=1\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence)) +\n    geom_line(group=1)\n\n\n\n\n\n\n\n# why keep group=1\n\n\n\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence))+ \n  geom_line(size=1,colour=\"blue\",linetype=\"dashed\")\n\n\n\n\n\n\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence))+ \n  geom_line(size=1,colour=\"blue\",linetype=\"dotted\")\n\n\n\n\n\n\n\n\n\n\n\nIn this example, we’re using the geom_line() geometry to create a line plot.\nWe specify the x-axis variable (date_tested) and the y-axis variable (incidence) within the aes() function. This creates a line plot showing how the incidence variable changes over time.\nYou can customize various aspects of the line plot using arguments within the geom_line() function. For example, you can change the size of the line, its color, and even its line type (“blank”, “solid”, “dashed”, “dotted”, “dotdash”, “longdash”, and “twodash”.). These customizations help to improve the readability and aesthetics of the plot.\n\n\n\n\n\n\nTutorial:\n\n\n\nWrite a code snippet to create a basic scatter plot to visualize incidence, then customize the appearance of points in a scatter plot to red dots"
  },
  {
    "objectID": "combined_file.html#creating-a-scatter-plot",
    "href": "combined_file.html#creating-a-scatter-plot",
    "title": "Training Information",
    "section": "Creating a Scatter Plot",
    "text": "Creating a Scatter Plot\n\n\n\n\n\n\nAim:\n\n\n\nUnderstand the structure of a scatter plot using ggplot.\nAdjust point properties such as color, size, and transparency.\n\n\n\nsimple scatter plotcustomize the points\n\n\n\n#ggplot(data=total_df, aes(x=date_tested, y= incidence))+ \n  #geom_point()\n\n\n\n\n#ggplot(data=total_df, aes(x=date_tested, y= incidence)) + \n  #geom_point(colour=\"blue\",size=3.2,alpha=0.9, shape=1)\n\n\n\n\nScatter plots are useful for visualizing the relationship between two continuous variables.\nIn this example, we’re using the geom_point() geometry to create a scatter plot.Each point represents a single data observation, with one variable plotted against the other.\nYou can customize various aspects of the scatter plot points using arguments within the geom_point() function.For example, you can change the color, size, and transparency of the points to highlight certain patterns or trends in the data.\n\n\n\n\n\n\nTutorial:\n\n\n\nWrite a code snippet to create a line plot as shown in the image below"
  },
  {
    "objectID": "combined_file.html#combination-of-line-and-scatter-plot",
    "href": "combined_file.html#combination-of-line-and-scatter-plot",
    "title": "Training Information",
    "section": "combination of line and scatter plot",
    "text": "combination of line and scatter plot\n\n\n\n\n\n\nAim:\n\n\n\nUnderstand how to combine line and scatter plots in ggplot. Visualize trends and individual data points simultaneously.\n\n\nCombining line and scatter plots allows you to display both trend information (through the line) and individual data points (through the scatter). This is useful for scenarios where you want to show both the overall trend and the variability of the data points around that trend.\n\n##line and point\n#ggplot(data=total_df, aes(x=date_tested, y= incidence))+ \n  #geom_line(size=1,colour=\"blue\")+\n  #geom_point(colour=\"red\",size=3.2,alpha=0.7, shape=1)\n\n\n\n\n\n\n\nTutorial:\n\n\n\nWrite a code snippet to create a combined plot showing both trends of incidence and individual data points for prevalence. Adjust the color of points in a combined plot."
  },
  {
    "objectID": "combined_file.html#customizing-plots-for-presentation-and-publication-purpose",
    "href": "combined_file.html#customizing-plots-for-presentation-and-publication-purpose",
    "title": "Training Information",
    "section": "Customizing plots for presentation and publication purpose",
    "text": "Customizing plots for presentation and publication purpose\n\n\n\n\n\n\nAim:\n\n\n\nLearn how to customize plots for presentation and publication. Adjust plot elements such as titles, labels, themes, and scales.\n\n\nCustomizing plots is essential for making them more visually appealing and informative for presentation or publication.\nElements such as titles, axis labels, and themes can be customized to enhance readability and aesthetics. Scales can be adjusted to ensure that the data is displayed in a clear and meaningful way.\n\n#ggplot(data=total_df, aes(x=date_tested, y= incidence))+\n # geom_point(colour=\"blue\", size=4.2)+\n # labs(x=\"Date\",y=\"incidence for 100000/month\",title=\"malaria Incidence,2018\")+\n  #theme_bw()+\n  #theme(plot.title = element_text(hjust=0.5), axis.text.x = element_text(angle=45,hjust=1))+\n#scale_x_date(date_breaks = \"1 month\", date_labels = \"%B\")\n\n\n\n\n\n\n\nTutorial:\n\n\n\ncreate the following plot"
  },
  {
    "objectID": "Basic_Visualization_concept.html",
    "href": "Basic_Visualization_concept.html",
    "title": "Basic Visualization concept",
    "section": "",
    "text": "library(tidyverse)\ndf &lt;- read.csv(\"Mabangata_region_incidence2018.csv\")\ndf$date_tested &lt;- as.Date(df$date_tested,\"%m/%d/%Y\")\ndf_und5&lt;- df %&gt;% filter(age_group==\"u5\")"
  },
  {
    "objectID": "Basic_Visualization_concept.html#layers-in-ggplot",
    "href": "Basic_Visualization_concept.html#layers-in-ggplot",
    "title": "Basic Visualization concept",
    "section": "Layers in ggplot",
    "text": "Layers in ggplot\n\n\n\n\n\n\nAim:\n\n\n\n\nLearn about the layered approach of ggplot.\nUnderstand how each layer adds elements to the plot.\n\n\n\nggplot operates on a layered grammar of graphics, where you start with a base plot and add layers of data, aesthetics, and geometries. Each layer in ggplot adds a different aspect to the plot, allowing you to customize and enhance the visualization.\n\nbase plotAdding pointsAdding lineAdding title\n\n\n\nbase_plot &lt;- ggplot(data = df_und5, aes(x = date_tested, y = incidence))\nbase_plot\n\n\n\n\n\n\n\nlayered_plot &lt;- ggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_point()\nlayered_plot\n\n\n\n\n\n\n\nggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_point() +\n  geom_line(color=\"blue\")\n\n\n\n\nobserving the line plot is on top of the points/scatter plot and on a bigger size (thickness) of the line the points wont be visible anymore\n\n\n\n\n\n\nTutorial:\n\n\n\nHow can we ensure the plots are visible at all time despite the size of the line, write the snippet code for this (arrange in the order that will ensure visibility of points).\n\n\n\n\n\nggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_point() +\n  geom_line(color=\"blue\") + labs(title = \"Mabangata incidence 2018\")"
  },
  {
    "objectID": "Basic_Visualization_concept.html#the-aes-function",
    "href": "Basic_Visualization_concept.html#the-aes-function",
    "title": "Basic Visualization concept",
    "section": "The aes Function",
    "text": "The aes Function\n\n\n\n\n\n\nAim:\n\n\n\n\nUnderstand the role of the aes function in ggplot.\nLearn when to use aes to map variables to aesthetics.\n\n\n\nThe aes() function is used to map variables to aesthetic properties such as x and y axes, colors, shapes, etc.\nVariables specified within the aes() function are mapped to aesthetics and can vary across data points.\nIt’s important to keep variables that should vary across data points (e.g., data attributes) inside the aes() function.\n\nAltering Variablesinside and outside the eas\n\n\nthe aes in the base position and altering the variables of x axis and y axis\n\nggplot(data = df, aes(x = date_tested, y = incidence)) +\n    geom_point()\n\n\n\n\n\nggplot(data = df, aes(y = date_tested, x = incidence)) +\n    geom_point()\n\n\n\n\n\n\n\n\n\n\nTutorial:\n\n\n\nshow a scatter plot with y axis being confirmed cases (conf) and x axis being dates\n\n\n\n\n\nggplot(data = df, aes(x = date_tested, y = incidence),color = \"green\") +\n  geom_point( )\n\n\n\n\n\nggplot(data = df, aes(x = date_tested, y = incidence)) +\n  geom_point(color = \"green\" )\n\n\n\n\n\nggplot(data = df, aes(x = date_tested, y = incidence,color = \"blue\")) +\n  geom_point( )\n\n\n\n\n\n\n\n\n\n\nTutorial:\n\n\n\nchange the incidence scatter plot to color blue\n\n\n\nggplot(data = df, aes(x = date_tested, y = incidence),color = age_group) +\n  geom_point( )\n\n\n\n\n\nggplot(data = df, aes(x = date_tested, y = incidence, color = age_group)) +\n  geom_point()\n\n\n\n\n\nggplot(data = df, aes(x = date_tested, y = conf, color = age_group)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\nTutorial:\n\n\n\nProduce the following plot:\n (Hint : data - df, y = confirmed cases, x = date_tested)\n\n\nwhen the color option is not categorical but numeric then it indicates the level\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence, color = incidence)) +\n  geom_point()"
  },
  {
    "objectID": "Basic_Visualization_concept.html#customization-and-layering",
    "href": "Basic_Visualization_concept.html#customization-and-layering",
    "title": "Main objective",
    "section": "Customization and Layering",
    "text": "Customization and Layering\n\n\n\n\n\n\nAim:\n\n\n\nExplore customization options in ggplot. Understand how to layer multiple elements in a plot.\n\n\nggplot allows for extensive customization of plots, including changing colors, sizes, labels, and more.\nYou can layer multiple geometries (e.g., points, lines) and additional elements (e.g., labels, titles) onto a single plot to create complex visualizations.\nLayers are added sequentially, with each layer building on top of the previous ones, allowing for fine-grained control over the plot’s appearance.\n\n# # Customizing and layering\n# ggplot(data = my_data, aes(x = x_variable, y = y_variable)) +\n#   geom_point() +  # Add points\n#   geom_smooth(method = \"lm\") +  # Add regression line\n#   labs(title = \"Scatter plot with Regression Line\", x = \"X-axis label\", y = \"Y-axis label\")  # Add title and axis labels"
  },
  {
    "objectID": "Basic_Visualization_concept.html#creating-a-line-plot",
    "href": "Basic_Visualization_concept.html#creating-a-line-plot",
    "title": "Basic Visualization concept",
    "section": "Creating a Line Plot",
    "text": "Creating a Line Plot\n\n\n\n\n\n\nAim:\n\n\n\n\nCreate a basic line plot using ggplot.\nElaborate the additional group=1 aesthetic\nExplore customization options by adjusting line properties such as size, color, and line type.\n\n\n\n\nsimple line plotcustomize the line\n\n\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence)) +\n    geom_line( )\n\n\n\n\n\nggplot(data = df_und5, aes(x = date_tested, y = conf)) +\n    geom_line( )\n\n\n\n\n\n\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence))+ \n  geom_line(size=1,colour=\"blue\",linetype=\"dashed\")\n\n\n\n\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence))+ \n  geom_line(size=2,colour=\"blue\",linetype=\"dotted\")\n\n\n\n\n\n\n\nIn this example, we’re using the geom_line() geometry to create a line plot.\nWe specify the x-axis variable (date_tested) and the y-axis variable (incidence) within the aes() function. This creates a line plot showing how the incidence variable changes over time.\nYou can customize various aspects of the line plot using arguments within the geom_line() function. For example, you can change the size of the line, its color, and even its line type (“blank”, “solid”, “dashed”, “dotted”, “dotdash”, “longdash”, and “twodash”). These customizations help to improve the readability and aesthetics of the plot.\n\n\n\n\n\n\nTutorial:\n\n\n\nWrite a code snippet to create a basic line plot to visualize population, then customize the appearance of the line color to a red dashed line (Hint: use a df_und5 data).\n\n\n\n\n\n\n\n\nBack to Layering\n\n\n\nOn changing the size of line to see how points cant be visible\n\nggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_point() +\n  geom_line(color=\"red\",size=2)\n\n\n\n\non the improvement of the previous then\n\nlayered&lt;- ggplot(data= df_und5,aes(x=date_tested,y=incidence))+\n  geom_line(color=\"red\",size=2)+\n  geom_point()\nlayered"
  },
  {
    "objectID": "Basic_Visualization_concept.html#creating-a-scatter-plot",
    "href": "Basic_Visualization_concept.html#creating-a-scatter-plot",
    "title": "Basic Visualization concept",
    "section": "Creating a Scatter Plot",
    "text": "Creating a Scatter Plot\n\n\n\n\n\n\nAim:\n\n\n\nUnderstand the structure of a scatter plot using ggplot.\nAdjust point properties such as color, size, and transparency.\n\n\n\nsimple scatter plotcustomize the points\n\n\n\nggplot(data=df_und5, aes(x=date_tested, y= incidence))+ \n  geom_point()\n\n\n\n\n\n\n\nggplot(data=df_und5, aes(x=date_tested, y= incidence)) + \n  geom_point(colour=\"blue\",size=3.2,alpha=0.9, shape=2)\n\n\n\n\nbeing specific according to your data when customizing\n\nggplot(data=df,aes(x=date_tested,y=incidence))+\n  geom_point(aes(shape=age_group))\n\n\n\n\n\nggplot(data=df,aes(x=date_tested,y=incidence))+\n  geom_point(aes(size=incidence,shape=age_group))\n\n\n\n\n\n\n\nScatter plots are useful for visualizing the relationship between two continuous variables.\nIn this example, we’re using the geom_point() geometry to create a scatter plot.Each point represents a single data observation, with one variable plotted against the other.\nYou can customize various aspects of the scatter plot points using arguments within the geom_point() function.For example, you can change the color, size, and transparency of the points to highlight certain patterns or trends in the data.\n\n\n\n\n\n\nTutorial:\n\n\n\n\nWrite a code snippet to create a scatter plot as shown in the image below. (Hint: use the df dataset with changing color aesthentic)\n\n\n\nCreate a scatter plot for confirmed cases in the Y axis and date_tested x axis with shapes of age_group and size of confirmed cases"
  },
  {
    "objectID": "Basic_Visualization_concept.html#combination-of-line-and-scatter-plot",
    "href": "Basic_Visualization_concept.html#combination-of-line-and-scatter-plot",
    "title": "Basic Visualization concept",
    "section": "combination of line and scatter plot",
    "text": "combination of line and scatter plot\n\n\n\n\n\n\nAim:\n\n\n\nUnderstand how to combine line and scatter plots in ggplot. Visualize trends and individual data points simultaneously.\n\n\nCombining line and scatter plots allows you to display both trend information (through the line) and individual data points (through the scatter). This is useful for scenarios where you want to show both the overall trend and the variability of the data points around that trend.\n\n##line and point\nggplot(data=df_und5, aes(x=date_tested, y= incidence))+\n  geom_line(size=1,colour=\"red\")+\n  geom_point(colour=\"blue\",size=3.2,alpha=1.7, shape=2)\n\n\n\n\n\n\n\n\n\n\nTutorial:\n\n\n\n\nWrite a code snippet to create a combined plot showing confirmed cases. (Adjust the color of points to green and line to dashed)\nReplicate the following plot"
  },
  {
    "objectID": "Basic_Visualization_concept.html#customizing-plots-for-presentation-and-publication-purpose",
    "href": "Basic_Visualization_concept.html#customizing-plots-for-presentation-and-publication-purpose",
    "title": "Basic Visualization concept",
    "section": "Customizing plots for presentation and publication purpose",
    "text": "Customizing plots for presentation and publication purpose\n\n\n\n\n\n\nAim:\n\n\n\nLearn how to customize plots for presentation and publication. Adjust plot elements such as titles, labels, themes, and scales.\n\n\nCustomizing plots is essential for making them more visually appealing and informative for presentation or publication.\nElements such as titles, axis labels, and themes can be customized to enhance readability and aesthetics. Scales can be adjusted to ensure that the data is displayed in a clear and meaningful way.\n\nggplot(data=df_und5, aes(x=date_tested, y= incidence))+\n  geom_point(colour=\"blue\", size=3.2)+\n  geom_line()+\n  labs(x=\"Date\",y=\"Incidence for 100000/month\",title=\"Malaria Incidence in Mabangata region,2018\")+\n  theme_bw()+\n  theme(plot.title = element_text(hjust=0.5),\n        axis.text.x=element_text(angle=45,hjust=1))+\n  scale_x_date(date_breaks = \"1 month\", date_labels = \"%B\")\n\n\n\n\n\n\n\n\n\n\nTutorial:\n\n\n\ncreate the following plot"
  },
  {
    "objectID": "training_information.html",
    "href": "training_information.html",
    "title": "Training Information",
    "section": "",
    "text": "The goal of this workshop is to equip participants with the ability to recognize and produce data visualizations in accordance with the best practices of the field. Looking forward to meeting you all!"
  },
  {
    "objectID": "training_information.html#venue",
    "href": "training_information.html#venue",
    "title": "Training Information",
    "section": "Venue",
    "text": "Venue\nThe workshop takes place at the Kigali Marriott Hotel in Kigali, Rwanda on April 19th 2024. We will begin at 9:30am and finish at 1pm (see schedule below). If you have had any trouble with software installation, please arrive 15 minutes prior to the beginning of the session so we can assist you."
  },
  {
    "objectID": "training_information.html#before-the-workshop",
    "href": "training_information.html#before-the-workshop",
    "title": "Training Information",
    "section": "Before the Workshop",
    "text": "Before the Workshop\nPlease install R, RStudio, and the tidyverse library following these installation instructions. If you have any trouble installing we will have a station on 18th April where you can come for assistance. Installation might take 15 minutes or more even on a good internet connection, so please install ahead of time!\n\n\n\n\n\n\nNote\n\n\n\n\nAll software used in this workshop is free.\nIf you have any difficulties with the installation, support can be provided on the first day of the AMMnet meeting, before the session, during breaks."
  },
  {
    "objectID": "training_information.html#friday-april-19th",
    "href": "training_information.html#friday-april-19th",
    "title": "Training Information",
    "section": "Friday April 19th",
    "text": "Friday April 19th\n\n\n\n\n\n\n\n\nTime\nSession\n\n\n\n\n\n15min before\nWelcome\nSupport for software installation\n\n\n\n9:30 - 9:50\nIntroduction to Data Visualization\n\n\n\n9:50-10:20\nIntroduction to RStudio, Reading Data, GGplot\n\n\n\n10:20-11:00\nLine Plots and Scatter Plots\n\n\n\n11-11:30\nCoffee Break\n\n\n\n11:30-12:10\nCombined Plot Types, Customizing Plots\n\n\n\n12:10-13:00\nConclusion and Survey"
  },
  {
    "objectID": "training_information.html#after-the-workshop",
    "href": "training_information.html#after-the-workshop",
    "title": "Training Information",
    "section": "After the Workshop",
    "text": "After the Workshop\nFill out the online post-workshop questionnaire"
  },
  {
    "objectID": "Getting_started_with_R.html",
    "href": "Getting_started_with_R.html",
    "title": "R an R Studio Installation",
    "section": "",
    "text": "Aim of this section\n\n\n\nTo provide you with a clear and concise instructions for installing R, RStudio, and R packages\n\n\n\n\nR is a powerfull programming language for statistical computing and graphics. It is one of main programming language used for data science (with other programming languages such as Python and Julia).\n\nStep 1Step 2Step 3Step 4Step 5Step 6\n\n\nDOWNLOAD R\nVisit the Comprehensive R Archive Network (CRAN) to download R which is a network of servers around the world that store identical up-to-date versions of code and documentation for R. \n Scroll down the page to locate the mirror that is the closest to your geographic location and click on its URL.\n\n\n\n\n\n\nTip\n\n\n\nSelecting a mirror that is close to you may help speed up the download. You can still use another mirror since the closest geographic location does not always give the best mirror.\n\n\nFor instance, when downloading R from Rwanda, you can select the mirror from South Africa.\n\n\nCHOOSE YOUR OPERATION SYSTEM\nOnce on the CRAN page, select your operating system: Linux, macOS, or Windows. \n\n\n\nSelect binaries for base distribution\n\n\n\n\nDOWNLOAD THE INSTALLER\nDownload the R installer (&lt; 80 MB)\n\n\n\n\nRUN THE INSTALLER\nLocate the downloaded file in your computer’s Downloads folder and double-click to run the installation wizard.\n\n\n\n\nCOMPLETE INSTALLATION\nFollow the instruction in the installation wizard to complete the installation.\n\n\n\n\n\n\n\n\n\nRstudio is an integrated development environment (IDE) for R, providing a user-friendly interface for R programming.\n\n\n\n\n\n\nNote\n\n\n\nRStudio is moving away from its R-exclusive focus and becoming Posit in October 2022 to enable broader data science, scientific research, and technical communication functionalities and, in particular, to integrate Python users.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIn order for RStudio desktop to work with R you must have installed R on your computer, see Section A.1. RStudio does not include R when you download and install it.\n\n\n\nStep 1Step 2Step 3Step 4Step 5Step 6\n\n\nDOWNLOAD RStudio\nYou can download R from the RStudio website. There are different RStudio products available, but the free Desktop version offers all necessary features for your analyses.\n\n\n\nCHOOSE YOUR OPERATION SYSTEM\nDownload the RStudio Desktop installer compatible with your operating system.\n\n\n\nRUN THE INSTALLER\nLocate the downloaded file in your computer’s Downloads folder and double-click to run the setup.\n\n\n\nCOMPLETE INSTALLATION\nFollow the instruction in the installation wizard to complete the installation process.\n\n\n\nCONFIGURATION\nAfter installing RStudio, open the application. Navigate to Tools &gt; Global options to set your preferences.\n\n\n\nUnder the General options and the Basic tab:\nWorkspace\nUncheck Restore .RData into workspace at startup\nEnsure that Never is selected for Save workspace to .RData on exit.\nHistory\nUncheck Always save history (even when not saving .RData)\nUncheck Remove duplicate entries in history\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nA R package is a collection of functions, data, and compiled code in a well-defined format, created to add specific functionality to R.\nThere are 10,000+ user contributed packages and growing.\nThere is a set of standard (or base) packages which is considered part of the R source code and automatically available as part of your R installation. Base packages contain the basic functions that allow R to work, and enable standard statistical and graphical functions on data sets.\n\n\n\nStep 1Step 2Step 3\n\n\nOpen RStudio on your computer\n\n\nIn RStudio, you can install a new package by selecting Tools &gt; Install packages… \n\n\nEnter the name of the package you want to install, or browse through available packages. Select the desired package(s) and click Install to add them to your R environment."
  },
  {
    "objectID": "Getting_started_with_R.html#installing-r",
    "href": "Getting_started_with_R.html#installing-r",
    "title": "R an R Studio Installation",
    "section": "",
    "text": "R is a powerfull programming language for statistical computing and graphics. It is one of main programming language used for data science (with other programming languages such as Python and Julia).\n\nStep 1Step 2Step 3Step 4Step 5Step 6\n\n\nDOWNLOAD R\nVisit the Comprehensive R Archive Network (CRAN) to download R which is a network of servers around the world that store identical up-to-date versions of code and documentation for R. \n Scroll down the page to locate the mirror that is the closest to your geographic location and click on its URL.\n\n\n\n\n\n\nTip\n\n\n\nSelecting a mirror that is close to you may help speed up the download. You can still use another mirror since the closest geographic location does not always give the best mirror.\n\n\nFor instance, when downloading R from Rwanda, you can select the mirror from South Africa.\n\n\nCHOOSE YOUR OPERATION SYSTEM\nOnce on the CRAN page, select your operating system: Linux, macOS, or Windows. \n\n\n\nSelect binaries for base distribution\n\n\n\n\nDOWNLOAD THE INSTALLER\nDownload the R installer (&lt; 80 MB)\n\n\n\n\nRUN THE INSTALLER\nLocate the downloaded file in your computer’s Downloads folder and double-click to run the installation wizard.\n\n\n\n\nCOMPLETE INSTALLATION\nFollow the instruction in the installation wizard to complete the installation."
  },
  {
    "objectID": "Getting_started_with_R.html#install-and-setup-rstudio-desktop",
    "href": "Getting_started_with_R.html#install-and-setup-rstudio-desktop",
    "title": "R an R Studio Installation",
    "section": "",
    "text": "Rstudio is an integrated development environment (IDE) for R, providing a user-friendly interface for R programming.\n\n\n\n\n\n\nNote\n\n\n\nRStudio is moving away from its R-exclusive focus and becoming Posit in October 2022 to enable broader data science, scientific research, and technical communication functionalities and, in particular, to integrate Python users.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIn order for RStudio desktop to work with R you must have installed R on your computer, see Section A.1. RStudio does not include R when you download and install it.\n\n\n\nStep 1Step 2Step 3Step 4Step 5Step 6\n\n\nDOWNLOAD RStudio\nYou can download R from the RStudio website. There are different RStudio products available, but the free Desktop version offers all necessary features for your analyses.\n\n\n\nCHOOSE YOUR OPERATION SYSTEM\nDownload the RStudio Desktop installer compatible with your operating system.\n\n\n\nRUN THE INSTALLER\nLocate the downloaded file in your computer’s Downloads folder and double-click to run the setup.\n\n\n\nCOMPLETE INSTALLATION\nFollow the instruction in the installation wizard to complete the installation process.\n\n\n\nCONFIGURATION\nAfter installing RStudio, open the application. Navigate to Tools &gt; Global options to set your preferences.\n\n\n\nUnder the General options and the Basic tab:\nWorkspace\nUncheck Restore .RData into workspace at startup\nEnsure that Never is selected for Save workspace to .RData on exit.\nHistory\nUncheck Always save history (even when not saving .RData)\nUncheck Remove duplicate entries in history"
  },
  {
    "objectID": "Getting_started_with_R.html#installing-r-packages",
    "href": "Getting_started_with_R.html#installing-r-packages",
    "title": "R an R Studio Installation",
    "section": "",
    "text": "Note\n\n\n\nA R package is a collection of functions, data, and compiled code in a well-defined format, created to add specific functionality to R.\nThere are 10,000+ user contributed packages and growing.\nThere is a set of standard (or base) packages which is considered part of the R source code and automatically available as part of your R installation. Base packages contain the basic functions that allow R to work, and enable standard statistical and graphical functions on data sets.\n\n\n\nStep 1Step 2Step 3\n\n\nOpen RStudio on your computer\n\n\nIn RStudio, you can install a new package by selecting Tools &gt; Install packages… \n\n\nEnter the name of the package you want to install, or browse through available packages. Select the desired package(s) and click Install to add them to your R environment."
  },
  {
    "objectID": "index.html#venue",
    "href": "index.html#venue",
    "title": "Training Information",
    "section": "",
    "text": "The workshop takes place at the Kigali Marriott Hotel in Kigali, Rwanda on the 19th April."
  },
  {
    "objectID": "index.html#before-the-workshop",
    "href": "index.html#before-the-workshop",
    "title": "Training Information",
    "section": "",
    "text": "Please try to have these installed before the training, if you have any trouble installing we will have a station on 18th April where you can come for assistance (The steps migt take approximately 15 minutes).\n\nInstall R\nInstall and setup RStudio Desktop\nlibraries\n\n\n\n\n\n\n\nnote\n\n\n\n\nAll software used in this workshop are free.\nIf you have any difficulties with the installation, support can be provided on the first day of the AMMnet meeting or before the session or during breaks."
  },
  {
    "objectID": "index.html#schedule",
    "href": "index.html#schedule",
    "title": "Training Information",
    "section": "Schedule",
    "text": "Schedule"
  },
  {
    "objectID": "index.html#friday-april-19th",
    "href": "index.html#friday-april-19th",
    "title": "Training Information",
    "section": "",
    "text": "Table 1: Overview Schedule\n\n\n\n\n\n\n\nTime\nSession\n\n\n\n\n\n15min before\nWelcome\nSupport for software installation\n\n\n\n9:30 - 9:50\nIntroduction to data Visualization presentation\n\n\n\n9:50-10:20\nIntroduction to R Studio, Reading Data, GGplot\n\n\n\n10:20-11:00\nLine Plot, Scatter Plots and Exercise\n\n\n\n30min\ncoffee Break\n\n\n\n11:30-12:10\ncombination of line and Scatter & Exercise\n\n\n\n12:10-13:00\nWinding up session & survey filling"
  },
  {
    "objectID": "index.html#after-the-workshop",
    "href": "index.html#after-the-workshop",
    "title": "Training Information",
    "section": "",
    "text": "Fill out the online post-workshop questionnaire"
  },
  {
    "objectID": "training_information.html#schedule",
    "href": "training_information.html#schedule",
    "title": "Training Information",
    "section": "Schedule",
    "text": "Schedule\n\n\n\n\n\n\n\n\nTime\nSession\n\n\n\n\n\n9:15-9:30\nWelcome\nSupport for software installation\n\n\n\n9:30 - 9:50\nIntroduction to Data Visualization\n\n\n\n9:50-10:20\nIntroduction to RStudio, Reading Data, GGplot\n\n\n\n10:20-11:00\nLine Plots and Scatter Plots\n\n\n\n11-11:30\nCoffee Break\n\n\n\n11:30-12:10\nCombined Plot Types, Customizing Plots\n\n\n\n12:10-13:00\nConclusion and Survey"
  }
]