[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Training Information",
    "section": "",
    "text": "The goal of this workshop is to equip participants with the ability to recognize and produce data visualizations in accordance with the best practices of the field. Looking forward to meeting you all!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Preparations_before_visualization.html#creating-a-new-r-script",
    "href": "Preparations_before_visualization.html#creating-a-new-r-script",
    "title": "Getting Familiar with RStudio",
    "section": "Creating a New R Script",
    "text": "Creating a New R Script\n\nStep1Step 2\n\n\nGo to File &gt; New File &gt; R Script\n\n\n\nSave your R script in the folder of desired directory"
  },
  {
    "objectID": "Preparations_before_visualization.html#understanding-r-panes",
    "href": "Preparations_before_visualization.html#understanding-r-panes",
    "title": "Getting Familiar with RStudio",
    "section": "Understanding R Panes",
    "text": "Understanding R Panes\n\nScript PaneConsole PaneEnvironment PanePlots, Files, and Viewer Pane\n\n\nThe Script Pane is where you write and edit your R code. It’s essentially your coding workspace. Here, you can create new scripts, open existing ones, and write or edit R code to perform various tasks like data manipulation, analysis, and visualization.\n\n\n\nHere, you can execute temporary code snippets. The Console Pane is where R executes your code and displays the output. When you run code from the Script Pane, the results, errors, and messages are displayed in the Console Pane. It’s an interactive interface where you can directly interact with R, execute commands, and see immediate results. \n\n\nThe Environment Pane provides a snapshot of your current R environment. It displays information about the objects (variables, functions, data frames) that are currently loaded into your R session. You can see the names, types, dimensions, and values of these objects. This pane is particularly useful for inspecting and managing your workspace during data analysis.\n\n\n\nThis pane serves multiple purposes:\nPlots: When you create plots in R, they are displayed in the Plots Pane. You can interact with the plots, zoom in/out, save them, or export them as images.\nFiles: The Files Pane provides a file browser within RStudio. You can navigate through your directory structure, open files, create new ones, and manage your project files directly from this pane.\nViewer: The Viewer Pane displays HTML content generated by R, such as R Markdown documents, Shiny applications, or HTML visualizations. It allows you to preview these documents within RStudio."
  },
  {
    "objectID": "Preparations_before_visualization.html#managing-libraries",
    "href": "Preparations_before_visualization.html#managing-libraries",
    "title": "Getting Familiar with RStudio",
    "section": "Managing Libraries",
    "text": "Managing Libraries\nFor this workshop, we will need to have the ggplot2 library installed and loaded.\nIn your console panel, run this code:\n\n library(ggplot2)\n\nIf it runs without an error, you have now loaded the ggplot2 library into your workspace. If it throws an error, you have to install it first:\n\n # install.packages(\"ggplot2\")\n library(ggplot2)\n\nIf this doesn’t work, put a red post-it on your computer and someone will assist you."
  },
  {
    "objectID": "Preparations_before_visualization.html#reading-data",
    "href": "Preparations_before_visualization.html#reading-data",
    "title": "Getting Familiar with RStudio",
    "section": "Reading Data",
    "text": "Reading Data\nUsually, you will read data from a file format such as a .csv, Stata, Excel file. However, for simplicity, today we will simply load data from a .RData file called Mabangata_Incidence_2018.RData. You should have received this file in an email, or you can download it here. If neither of those works, put a red post-it on your computer and someone will help you install it from a USB drive.\nOnce it’s on your local machine, double click on the file and it should open in your RStudio session. You will know that it worked if you see two new items in your Environment Pane named df and df_und5. These datasets are imaginary malaria incidence data, by age group, from an imaginary location called Mabangata. This dataset was generated for training purposes by the Malaria Atlas Project and used with permission.\n\nload(\"Mabangata_Incidence_2018.RData\")\n\nWe can visually inspect these datasets by typing their names into the console:\n\ndf\n\n   date_tested age_group conf       pop  incidence\n1   2018-01-01     total  501 1929193.8  25.969397\n2   2018-01-01        u5  257  285209.8  90.109096\n3   2018-01-01       ov5  244 1643984.0  14.841994\n4   2018-02-01     total  519 1929193.8  26.902429\n5   2018-02-01        u5  266  285209.8  93.264668\n6   2018-02-01       ov5  253 1643984.0  15.389444\n7   2018-03-01     total  207 1929193.8  10.729871\n8   2018-03-01        u5  100  285209.8  35.061905\n9   2018-03-01       ov5  107 1643984.0   6.508579\n10  2018-04-01     total  481 1929193.8  24.932695\n11  2018-04-01        u5  232  285209.8  81.343620\n12  2018-04-01       ov5  249 1643984.0  15.146133\n13  2018-05-01     total  148 1929193.8   7.671598\n14  2018-05-01        u5   73  285209.8  25.595191\n15  2018-05-01       ov5   75 1643984.0   4.562088\n16  2018-06-01     total  416 1929193.8  21.563412\n17  2018-06-01        u5  209  285209.8  73.279382\n18  2018-06-01       ov5  207 1643984.0  12.591364\n19  2018-07-01     total  138 1929193.8   7.153247\n20  2018-07-01        u5   83  285209.8  29.101381\n21  2018-07-01       ov5   55 1643984.0   3.345531\n22  2018-08-01     total  386 1929193.8  20.008358\n23  2018-08-01        u5  195  285209.8  68.370715\n24  2018-08-01       ov5  191 1643984.0  11.618118\n25  2018-09-01     total 1554 1929193.8  80.551782\n26  2018-09-01        u5  869  285209.8 304.687956\n27  2018-09-01       ov5  685 1643984.0  41.667073\n28  2018-10-01     total  625 1929193.8  32.396952\n29  2018-10-01        u5  351  285209.8 123.067287\n30  2018-10-01       ov5  274 1643984.0  16.666829\n31  2018-11-01     total 1365 1929193.8  70.754944\n32  2018-11-01        u5  728  285209.8 255.250670\n33  2018-11-01       ov5  637 1643984.0  38.747336\n34  2018-12-01     total  567 1929193.8  29.390515\n35  2018-12-01        u5  304  285209.8 106.588192\n36  2018-12-01       ov5  263 1643984.0  15.997723\n\ndf_und5\n\n   date_tested age_group conf      pop incidence\n1   2018-01-01        u5  257 285209.8  90.10910\n2   2018-02-01        u5  266 285209.8  93.26467\n3   2018-03-01        u5  100 285209.8  35.06191\n4   2018-04-01        u5  232 285209.8  81.34362\n5   2018-05-01        u5   73 285209.8  25.59519\n6   2018-06-01        u5  209 285209.8  73.27938\n7   2018-07-01        u5   83 285209.8  29.10138\n8   2018-08-01        u5  195 285209.8  68.37072\n9   2018-09-01        u5  869 285209.8 304.68796\n10  2018-10-01        u5  351 285209.8 123.06729\n11  2018-11-01        u5  728 285209.8 255.25067\n12  2018-12-01        u5  304 285209.8 106.58819\n\n\nBy looking at the data, we see that df contains malaria-related information for each month of 2018:\n\ndate_tested: the month for which data was collected.\nage_group: the age group of data collectiion. Possible values areu5 (under 5), ov5 (over 5), or total\nconf: confirmed malaria cases\npop: population\nincidence: cases per 100,000 people\n\nThe second dataset, df_und5, is df, but subset down to only the u5 age group.\nWe will use both of these datasets for our plotting in the following section."
  },
  {
    "objectID": "combined_file.html",
    "href": "combined_file.html",
    "title": "Training Information",
    "section": "",
    "text": "The goal of this workshop is to equip participants with the ability to recognize and produce data visualizations in accordance with the best practices of the field. Looking forward to meeting you all!\n\n\nThe workshop takes place at .. Hotel. The conference room is … Hall.\n\n\n\nPlease try to have these installed before the training, if you have any trouble installing we will have a station on 18th April where you can come for assistance (The steps migt take approximately 15 minutes).\na.  [Install R]( )\n\nb.  [Install and setup RStudio Desktop]( )\n\nc.  [libraries]( )\n\n\n\n\n\n\nnote\n\n\n\n\nAll software used in this workshop are free.\nIf you have any difficulties with the installation, support can be provided on the first day of the AMMnet meeting or before the session or during breaks.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTable 1: Overview Schedule\n\n\n\n\n\n\n\n\n\n\nTime\nSession\n\n\n\n\n\n15min before\nWelcome\nSupport for software installation\n\n\n\n15min\nIntroduction to data Visualization presentation\n\n\n\n30min\nIntroduction to R Studio, Reading Data, GGplot\n\n\n\n30min\ncoffee Break\n\n\n\n50min\nLine Plot, Scatter Plots and Exercise\n\n\n\n30min\ncombination of line and Scatter & Exercise\n\n\n\n20min\nWinding up session & survey filling\n\n\n\n\n\n\n\n\n\n\n\n\nFill out the online post-workshop questionnaire (link to be provided after the workshop)"
  },
  {
    "objectID": "combined_file.html#venue",
    "href": "combined_file.html#venue",
    "title": "Training Information",
    "section": "",
    "text": "The workshop takes place at .. Hotel. The conference room is … Hall."
  },
  {
    "objectID": "combined_file.html#before-the-workshop",
    "href": "combined_file.html#before-the-workshop",
    "title": "Training Information",
    "section": "",
    "text": "Please try to have these installed before the training, if you have any trouble installing we will have a station on 18th April where you can come for assistance (The steps migt take approximately 15 minutes).\na.  [Install R]( )\n\nb.  [Install and setup RStudio Desktop]( )\n\nc.  [libraries]( )\n\n\n\n\n\n\nnote\n\n\n\n\nAll software used in this workshop are free.\nIf you have any difficulties with the installation, support can be provided on the first day of the AMMnet meeting or before the session or during breaks."
  },
  {
    "objectID": "combined_file.html#friday-april-19th",
    "href": "combined_file.html#friday-april-19th",
    "title": "Training Information",
    "section": "",
    "text": "Table 1: Overview Schedule\n\n\n\n\n\n\n\n\n\n\nTime\nSession\n\n\n\n\n\n15min before\nWelcome\nSupport for software installation\n\n\n\n15min\nIntroduction to data Visualization presentation\n\n\n\n30min\nIntroduction to R Studio, Reading Data, GGplot\n\n\n\n30min\ncoffee Break\n\n\n\n50min\nLine Plot, Scatter Plots and Exercise\n\n\n\n30min\ncombination of line and Scatter & Exercise\n\n\n\n20min\nWinding up session & survey filling"
  },
  {
    "objectID": "combined_file.html#after-the-workshop",
    "href": "combined_file.html#after-the-workshop",
    "title": "Training Information",
    "section": "",
    "text": "Fill out the online post-workshop questionnaire (link to be provided after the workshop)"
  },
  {
    "objectID": "combined_file.html#installing-r",
    "href": "combined_file.html#installing-r",
    "title": "Training Information",
    "section": "Installing R",
    "text": "Installing R\nR is a powerfull programming language for statistical computing and graphics. It is one of main programming language used for data science (with other programming languages such as Python and Julia).\n\nStep 1Step 2Step 3Step 4Step 5Step 6\n\n\nDOWNLOAD R\nVisit the Comprehensive R Archive Network (CRAN) to download R which is a network of servers around the world that store identical up-to-date versions of code and documentation for R. \n Scroll down the page to locate the mirror that is the closest to your geographic location and click on its URL.\n\n\n\n\n\n\nTip\n\n\n\nSelecting a mirror that is close to you may help speed up the download. You can still use another mirror since the closest geographic location does not always give the best mirror.\n\n\nFor instance, when downloading R from Rwanda, you can select the mirror from South Africa.\n\n\nCHOOSE YOUR OPERATION SYSTEM\nOnce on the CRAN page, select your operating system: Linux, macOS, or Windows. \n\n\n\nSelect binaries for base distribution\n\n\n\n\nDOWNLOAD THE INSTALLER\nDownload the R installer (&lt; 80 MB)\n\n\n\n\nRUN THE INSTALLER\nLocate the downloaded file in your computer’s Downloads folder and double-click to run the installation wizard.\n\n\n\n\nCOMPLETE INSTALLATION\nFollow the instruction in the installation wizard to complete the installation."
  },
  {
    "objectID": "combined_file.html#install-and-setup-rstudio-desktop",
    "href": "combined_file.html#install-and-setup-rstudio-desktop",
    "title": "Training Information",
    "section": "Install and setup RStudio Desktop",
    "text": "Install and setup RStudio Desktop\nRstudio is an integrated development environment (IDE) for R, providing a user-friendly interface for R programming.\n\n\n\n\n\n\nNote\n\n\n\nRStudio is moving away from its R-exclusive focus and becoming Posit in October 2022 to enable broader data science, scientific research, and technical communication functionalities and, in particular, to integrate Python users.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIn order for RStudio desktop to work with R you must have installed R on your computer, see Section A.1. RStudio does not include R when you download and install it.\n\n\n\nStep 1Step 2Step 3Step 4Step 5Step 6\n\n\nDOWNLOAD RStudio\nYou can download R from the RStudio website. There are different RStudio products available, but the free Desktop version offers all necessary features for your analyses.\n\n\n\nCHOOSE YOUR OPERATION SYSTEM\nDownload the RStudio Desktop installer compatible with your operating system.\n\n\n\nRUN THE INSTALLER\nLocate the downloaded file in your computer’s Downloads folder and double-click to run the setup.\n\n\n\nCOMPLETE INSTALLATION\nFollow the instruction in the installation wizard to complete the installation process.\n\n\n\nCONFIGURATION\nAfter installing RStudio, open the application. Navigate to Tools &gt; Global options to set your preferences.\n\n\n\nUnder the General options and the Basic tab:\nWorkspace\nUncheck Restore .RData into workspace at startup\nEnsure that Never is selected for Save workspace to .RData on exit.\nHistory\nUncheck Always save history (even when not saving .RData)\nUncheck Remove duplicate entries in history"
  },
  {
    "objectID": "combined_file.html#installing-r-packages",
    "href": "combined_file.html#installing-r-packages",
    "title": "Training Information",
    "section": "Installing R packages",
    "text": "Installing R packages\n\n\n\n\n\n\nNote\n\n\n\nA R package is a collection of functions, data, and compiled code in a well-defined format, created to add specific functionality to R.\nThere are 10,000+ user contributed packages and growing.\nThere is a set of standard (or base) packages which is considered part of the R source code and automatically available as part of your R installation. Base packages contain the basic functions that allow R to work, and enable standard statistical and graphical functions on data sets.\n\n\n\nStep 1Step 2Step 3\n\n\nOpen RStudio on your computer\n\n\nIn RStudio, you can install a new package by selecting Tools &gt; Install packages… \n\n\nEnter the name of the package you want to install, or browse through available packages. Select the desired package(s) and click Install to add them to your R environment."
  },
  {
    "objectID": "combined_file.html#creating-a-new-r-script",
    "href": "combined_file.html#creating-a-new-r-script",
    "title": "Training Information",
    "section": "Creating a new R Script",
    "text": "Creating a new R Script\n\n\n\n\n\n\nAim:\n\n\n\nUnderstanding how to create and save a new R script file in RStudio.\n\n\n\nStep1Step 2\n\n\nGo to file &gt; New file &gt; R Script\n\n\n\nSave your R script in the folder of desired directory"
  },
  {
    "objectID": "combined_file.html#understanding-r-panes",
    "href": "combined_file.html#understanding-r-panes",
    "title": "Training Information",
    "section": "Understanding R Panes",
    "text": "Understanding R Panes\n\n\n\n\n\n\nAim:\n\n\n\nFamiliarize yourself with the different panes in RStudio and their respective functionalities.\n\n\n\nScript PaneConsole PaneEnvironment PanePlots, Files, and Viewer Pane\n\n\nThe Script Pane is where you write and edit your R code. It’s essentially your coding workspace. Here, you can create new scripts, open existing ones, and write or edit R code to perform various tasks like data manipulation, analysis, and visualization.\n\n\n\nHere, you can execute temporary code snippets. The Console Pane is where R executes your code and displays the output. When you run code from the Script Pane, the results, errors, and messages are displayed in the Console Pane. It’s an interactive interface where you can directly interact with R, execute commands, and see immediate results. \n\n\nThe Environment Pane provides a snapshot of your current R environment. It displays information about the objects (variables, functions, data frames) that are currently loaded into your R session. You can see the names, types, dimensions, and values of these objects. This pane is particularly useful for inspecting and managing your workspace during data analysis.\n\n\n\nThis pane serves multiple purposes:\nPlots: When you create plots in R, they are displayed in the Plots Pane. You can interact with the plots, zoom in/out, save them, or export them as images.\nFiles: The Files Pane provides a file browser within RStudio. You can navigate through your directory structure, open files, create new ones, and manage your project files directly from this pane.\nViewer: The Viewer Pane displays HTML content generated by R, such as R Markdown documents, Shiny applications, or HTML visualizations. It allows you to preview these documents within RStudio."
  },
  {
    "objectID": "combined_file.html#managing-libraries",
    "href": "combined_file.html#managing-libraries",
    "title": "Training Information",
    "section": "Managing Libraries",
    "text": "Managing Libraries\n\n\n\n\n\n\nAim:\n\n\n\nLearn how to load and manage libraries for additional functionalities in R.\n\n\nEnsure to call out libraries responsible for the task aimed to achieve. for visualization ggplot will be used and tidyvers for data reading and exploration/Manipulation.\n\n# Load required libraries\n library(ggplot2)\n library(tidyverse)"
  },
  {
    "objectID": "combined_file.html#reading-data",
    "href": "combined_file.html#reading-data",
    "title": "Training Information",
    "section": "Reading data",
    "text": "Reading data\n\n\n\n\n\n\nAim:\n\n\n\nUnderstand how to import data into R from various file formats on different directories.\n\n\nYou can read data from various file formarts like csv, excel and others.\nReading CSV Files\n\nStep 1Step 2\n\n\nEnsure you save your data and R script in same folder\n\n# Read CSV file\ndf &lt;- read.csv(\"Mabangata_region_incidence2018.csv\")\n\n\n\nWhen not in the same folder then copy the path/directory of the file\n\n# Read CSV file from a different folder\n# df&lt;- read.csv(\"C:/Users/shirgl/Desktop/SwissTPH/conferences&presentations/Ammnet/training materials/data_malariaAtlas/Mabangata_region_incidence2018.csv\")\n\n\n\n\nReading Other File Formats\n\nexcelStata (Dta)\n\n\n\n# Load library for Excel\n# library(readxl)\n# Read Excel file\n# read_excel()\n\n\n\n\n# Load library for Stata\n# library()\n# Read Stata file\n# read.dta()\n\n\n\n\n\ndata manipulation to choose the data of under five and convert to date format\n\ndf$date_tested &lt;- as.Date(df$date_tested,\"%m/%d/%Y\")\ndf_und5&lt;- df %&gt;% filter(age_group==\"u5\") \n\n\n# Load required libraries\n library(ggplot2)\n library(tidyverse)\n df &lt;- read.csv(\"Mabangata_region_incidence2018.csv\")\n df$date_tested &lt;- as.Date(df$date_tested,\"%m/%d/%Y\")\n df_und5&lt;- df %&gt;% filter(age_group==\"u5\")"
  },
  {
    "objectID": "combined_file.html#layers-in-ggplot",
    "href": "combined_file.html#layers-in-ggplot",
    "title": "Training Information",
    "section": "Layers in ggplot",
    "text": "Layers in ggplot\n\n\n\n\n\n\nAim:\n\n\n\nLearn about the layered approach of ggplot. Understand how each layer adds elements to the plot.\n\n\nggplot operates on a layered grammar of graphics, where you start with a base plot and add layers of data, aesthetics, and geometries. Each layer in ggplot adds a different aspect to the plot, allowing you to customize and enhance the visualization.\n\nbase plotAdding pointsAdding Vertical lineAdding title\n\n\n\nbase_plot &lt;- ggplot(data = df_und5, aes(x = date_tested, y = incidence))\n\n\n\n\nlayered_plot &lt;- base_plot +\n  geom_point()\n\n\n\n\nlayered_vline&lt;- layered_plot +\n  geom_vline(xintercept = as.numeric(as.Date('2018-05-01')))\n\n\n\n\nlayered_vline + labs(title = \"Mabangata incidence 2018\")"
  },
  {
    "objectID": "combined_file.html#the-aes-function",
    "href": "combined_file.html#the-aes-function",
    "title": "Training Information",
    "section": "The aes Function",
    "text": "The aes Function\n\n\n\n\n\n\nAim:\n\n\n\nUnderstand the role of the aes function in ggplot. Learn when to use aes to map variables to aesthetics.\n\n\nThe aes() function is used to map variables to aesthetic properties such as x and y axes, colors, shapes, etc.\nVariables specified within the aes() function are mapped to aesthetics and can vary across data points.\nIt’s important to keep variables that should vary across data points (e.g., data attributes) inside the aes() function.\n\npositioninginside and outside the eas\n\n\nthe aes in the base or geom\n\nggplot(data = df, aes(x = date_tested, y = incidence)) +\n    geom_point()+\n  geom_line()\n\n\n\n\n\n\n\n\n\n# ggplot(data = df) +\n#   geom_point( aes(x = date_tested, y = incidence))+\n#   geom_line()\n\n\nggplot(data = df) +\n  geom_point( aes(x = date_tested, y = incidence))+\n  geom_line(aes(x = date_tested, y = conf))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = df, aes(x = date_tested, y = incidence),color = age_group) +\n  geom_point( )\n\n\n\n\n\n\n\n\n\nggplot(data = df, aes(x = date_tested, y = incidence, color = age_group)) +\n  geom_point()\n\n\n\n\n\n\n\n\nwhen the color option is not categorical but numeric then it indicates the level\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence, color = incidence)) +\n  geom_point()\n\n\n\n\n\n\n\n\n??scale_color_distiller, gradient"
  },
  {
    "objectID": "combined_file.html#customization-and-layering",
    "href": "combined_file.html#customization-and-layering",
    "title": "Training Information",
    "section": "Customization and Layering",
    "text": "Customization and Layering\n\n\n\n\n\n\nAim:\n\n\n\nExplore customization options in ggplot. Understand how to layer multiple elements in a plot.\n\n\nggplot allows for extensive customization of plots, including changing colors, sizes, labels, and more.\nYou can layer multiple geometries (e.g., points, lines) and additional elements (e.g., labels, titles) onto a single plot to create complex visualizations.\nLayers are added sequentially, with each layer building on top of the previous ones, allowing for fine-grained control over the plot’s appearance.\n\n# # Customizing and layering\n# ggplot(data = my_data, aes(x = x_variable, y = y_variable)) +\n#   geom_point() +  # Add points\n#   geom_smooth(method = \"lm\") +  # Add regression line\n#   labs(title = \"Scatter plot with Regression Line\", x = \"X-axis label\", y = \"Y-axis label\")  # Add title and axis labels"
  },
  {
    "objectID": "combined_file.html#creating-a-line-plot",
    "href": "combined_file.html#creating-a-line-plot",
    "title": "Training Information",
    "section": "Creating a Line Plot",
    "text": "Creating a Line Plot\n\n\n\n\n\n\nAim:\n\n\n\nCreate a basic line plot using ggplot.\nExplore customization options by adjusting line properties such as size, color, and line type.\n\n\n\nsimple line plotcustomize the line\n\n\nwhy keeping group=1\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence)) +\n    geom_line(group=1)\n\n\n\n\n\n\n\n# why keep group=1\n\n\n\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence))+ \n  geom_line(size=1,colour=\"blue\",linetype=\"dashed\")\n\n\n\n\n\n\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence))+ \n  geom_line(size=1,colour=\"blue\",linetype=\"dotted\")\n\n\n\n\n\n\n\n\n\n\n\nIn this example, we’re using the geom_line() geometry to create a line plot.\nWe specify the x-axis variable (date_tested) and the y-axis variable (incidence) within the aes() function. This creates a line plot showing how the incidence variable changes over time.\nYou can customize various aspects of the line plot using arguments within the geom_line() function. For example, you can change the size of the line, its color, and even its line type (“blank”, “solid”, “dashed”, “dotted”, “dotdash”, “longdash”, and “twodash”.). These customizations help to improve the readability and aesthetics of the plot.\n\n\n\n\n\n\nTutorial:\n\n\n\nWrite a code snippet to create a basic scatter plot to visualize incidence, then customize the appearance of points in a scatter plot to red dots"
  },
  {
    "objectID": "combined_file.html#creating-a-scatter-plot",
    "href": "combined_file.html#creating-a-scatter-plot",
    "title": "Training Information",
    "section": "Creating a Scatter Plot",
    "text": "Creating a Scatter Plot\n\n\n\n\n\n\nAim:\n\n\n\nUnderstand the structure of a scatter plot using ggplot.\nAdjust point properties such as color, size, and transparency.\n\n\n\nsimple scatter plotcustomize the points\n\n\n\n#ggplot(data=total_df, aes(x=date_tested, y= incidence))+ \n  #geom_point()\n\n\n\n\n#ggplot(data=total_df, aes(x=date_tested, y= incidence)) + \n  #geom_point(colour=\"blue\",size=3.2,alpha=0.9, shape=1)\n\n\n\n\nScatter plots are useful for visualizing the relationship between two continuous variables.\nIn this example, we’re using the geom_point() geometry to create a scatter plot.Each point represents a single data observation, with one variable plotted against the other.\nYou can customize various aspects of the scatter plot points using arguments within the geom_point() function.For example, you can change the color, size, and transparency of the points to highlight certain patterns or trends in the data.\n\n\n\n\n\n\nTutorial:\n\n\n\nWrite a code snippet to create a line plot as shown in the image below"
  },
  {
    "objectID": "combined_file.html#combination-of-line-and-scatter-plot",
    "href": "combined_file.html#combination-of-line-and-scatter-plot",
    "title": "Training Information",
    "section": "combination of line and scatter plot",
    "text": "combination of line and scatter plot\n\n\n\n\n\n\nAim:\n\n\n\nUnderstand how to combine line and scatter plots in ggplot. Visualize trends and individual data points simultaneously.\n\n\nCombining line and scatter plots allows you to display both trend information (through the line) and individual data points (through the scatter). This is useful for scenarios where you want to show both the overall trend and the variability of the data points around that trend.\n\n##line and point\n#ggplot(data=total_df, aes(x=date_tested, y= incidence))+ \n  #geom_line(size=1,colour=\"blue\")+\n  #geom_point(colour=\"red\",size=3.2,alpha=0.7, shape=1)\n\n\n\n\n\n\n\nTutorial:\n\n\n\nWrite a code snippet to create a combined plot showing both trends of incidence and individual data points for prevalence. Adjust the color of points in a combined plot."
  },
  {
    "objectID": "combined_file.html#customizing-plots-for-presentation-and-publication-purpose",
    "href": "combined_file.html#customizing-plots-for-presentation-and-publication-purpose",
    "title": "Training Information",
    "section": "Customizing plots for presentation and publication purpose",
    "text": "Customizing plots for presentation and publication purpose\n\n\n\n\n\n\nAim:\n\n\n\nLearn how to customize plots for presentation and publication. Adjust plot elements such as titles, labels, themes, and scales.\n\n\nCustomizing plots is essential for making them more visually appealing and informative for presentation or publication.\nElements such as titles, axis labels, and themes can be customized to enhance readability and aesthetics. Scales can be adjusted to ensure that the data is displayed in a clear and meaningful way.\n\n#ggplot(data=total_df, aes(x=date_tested, y= incidence))+\n # geom_point(colour=\"blue\", size=4.2)+\n # labs(x=\"Date\",y=\"incidence for 100000/month\",title=\"malaria Incidence,2018\")+\n  #theme_bw()+\n  #theme(plot.title = element_text(hjust=0.5), axis.text.x = element_text(angle=45,hjust=1))+\n#scale_x_date(date_breaks = \"1 month\", date_labels = \"%B\")\n\n\n\n\n\n\n\nTutorial:\n\n\n\ncreate the following plot"
  },
  {
    "objectID": "Basic_Visualization_concept.html",
    "href": "Basic_Visualization_concept.html",
    "title": "Making Plots with ggplot2",
    "section": "",
    "text": "At the end of the training we will be able to produce this plot:"
  },
  {
    "objectID": "Basic_Visualization_concept.html#layers-in-ggplot",
    "href": "Basic_Visualization_concept.html#layers-in-ggplot",
    "title": "Making Plots with ggplot2",
    "section": "Layers in ggplot",
    "text": "Layers in ggplot\n\n\n\n\n\n\nAim:\n\n\n\n\nLearn about the layered approach of ggplot.\nUnderstand how each layer adds elements to the plot.\n\n\n\nggplot operates on a layered grammar of graphics, where you start with a base plot and add layers of data, aesthetics, and geometries. Each layer in ggplot adds a different aspect to the plot, allowing you to customize and enhance the visualization.\n\nbase plotAdding pointsAdding lineAdding title\n\n\n\nbase_plot &lt;- ggplot(data = df_und5, aes(x = date_tested, y = incidence))\nbase_plot\n\n\n\n\n\n\n\nlayered_plot &lt;- ggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_point()\nlayered_plot\n\n\n\n\n\n\n\nggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_point() +\n  geom_line(color=\"blue\")\n\n\n\n\nobserving the line plot is on top of the points/scatter plot and on a bigger size (thickness) of the line the points wont be visible anymore\n\n\n\nggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_point() +\n  geom_line(color=\"blue\") + labs(title = \"Mabangata incidence 2018\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise:\n\n\n\nHow can we ensure the plots are visible at all time despite the size of the line, write the snippet code for this (arrange in the order that will ensure visibility of points)."
  },
  {
    "objectID": "Basic_Visualization_concept.html#the-aes-function",
    "href": "Basic_Visualization_concept.html#the-aes-function",
    "title": "Making Plots with ggplot2",
    "section": "The aes Function",
    "text": "The aes Function\n\n\n\n\n\n\nAim:\n\n\n\n\nUnderstand the role of the aes function in ggplot.\nLearn when to use aes to map variables to aesthetics.\n\n\n\nThe aes() function is used to map variables to aesthetic properties such as x and y axes, colors, shapes, etc.\nVariables specified within the aes() function are mapped to aesthetics and can vary across data points.\nIt’s important to keep variables that should vary across data points (e.g., data attributes) inside the aes() function.\n\nAltering Variablesinside and outside the eas\n\n\nthe aes in the base position and altering the variables of x axis and y axis\n\nggplot(data = df, aes(x = date_tested, y = incidence)) +\n    geom_point()\n\n\n\n\n\nggplot(data = df, aes(y = date_tested, x = incidence)) +\n    geom_point()\n\n\n\n\n\n\n\n\n\n\nTutorial:\n\n\n\nshow a scatter plot with y axis being confirmed cases (conf) and x axis being dates\n\n\n\n\n\nggplot(data = df, aes(x = date_tested, y = incidence),color = \"green\") +\n  geom_point( )\n\n\n\n\n\nggplot(data = df, aes(x = date_tested, y = incidence)) +\n  geom_point(color = \"green\" )\n\n\n\n\n\nggplot(data = df, aes(x = date_tested, y = incidence,color = \"blue\")) +\n  geom_point( )\n\n\n\n\n\n\n\n\n\n\nTutorial:\n\n\n\nchange the incidence scatter plot to color blue\n\n\n\nggplot(data = df, aes(x = date_tested, y = incidence),color = age_group) +\n  geom_point( )\n\n\n\n\n\nggplot(data = df, aes(x = date_tested, y = incidence, color = age_group)) +\n  geom_point()\n\n\n\n\n\nggplot(data = df, aes(x = date_tested, y = conf, color = age_group)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\nTutorial:\n\n\n\nProduce the following plot:\n (Hint : data - df, y = confirmed cases, x = date_tested)\n\n\nwhen the color option is not categorical but numeric then it indicates the level\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence, color = incidence)) +\n  geom_point()"
  },
  {
    "objectID": "Basic_Visualization_concept.html#customization-and-layering",
    "href": "Basic_Visualization_concept.html#customization-and-layering",
    "title": "Main objective",
    "section": "Customization and Layering",
    "text": "Customization and Layering\n\n\n\n\n\n\nAim:\n\n\n\nExplore customization options in ggplot. Understand how to layer multiple elements in a plot.\n\n\nggplot allows for extensive customization of plots, including changing colors, sizes, labels, and more.\nYou can layer multiple geometries (e.g., points, lines) and additional elements (e.g., labels, titles) onto a single plot to create complex visualizations.\nLayers are added sequentially, with each layer building on top of the previous ones, allowing for fine-grained control over the plot’s appearance.\n\n# # Customizing and layering\n# ggplot(data = my_data, aes(x = x_variable, y = y_variable)) +\n#   geom_point() +  # Add points\n#   geom_smooth(method = \"lm\") +  # Add regression line\n#   labs(title = \"Scatter plot with Regression Line\", x = \"X-axis label\", y = \"Y-axis label\")  # Add title and axis labels"
  },
  {
    "objectID": "Basic_Visualization_concept.html#creating-a-line-plot",
    "href": "Basic_Visualization_concept.html#creating-a-line-plot",
    "title": "Making Plots with ggplot2",
    "section": "Creating a Line Plot",
    "text": "Creating a Line Plot\n\n\n\n\n\n\nAim:\n\n\n\n\nCreate a basic line plot using ggplot.\nElaborate the additional group=1 aesthetic\nExplore customization options by adjusting line properties such as size, color, and line type.\n\n\n\n\nsimple line plotcustomize the line\n\n\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence)) +\n    geom_line( )\n\n\n\n\n\nggplot(data = df_und5, aes(x = date_tested, y = conf)) +\n    geom_line( )\n\n\n\n\n\n\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence))+ \n  geom_line(size=1,colour=\"blue\",linetype=\"dashed\")\n\n\n\n\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence))+ \n  geom_line(size=2,colour=\"blue\",linetype=\"dotted\")\n\n\n\n\n\n\n\nIn this example, we’re using the geom_line() geometry to create a line plot.\nWe specify the x-axis variable (date_tested) and the y-axis variable (incidence) within the aes() function. This creates a line plot showing how the incidence variable changes over time.\nYou can customize various aspects of the line plot using arguments within the geom_line() function. For example, you can change the size of the line, its color, and even its line type (“blank”, “solid”, “dashed”, “dotted”, “dotdash”, “longdash”, and “twodash”). These customizations help to improve the readability and aesthetics of the plot.\n\n\n\n\n\n\nTutorial:\n\n\n\nWrite a code snippet to create a basic line plot to visualize population, then customize the appearance of the line color to a red dashed line (Hint: use a df_und5 data).\n\n\n\n\n\n\n\n\nBack to Layering\n\n\n\nOn changing the size of line to see how points cant be visible\n\nggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_point() +\n  geom_line(color=\"red\",size=2)\n\n\n\n\non the improvement of the previous then\n\nlayered&lt;- ggplot(data= df_und5,aes(x=date_tested,y=incidence))+\n  geom_line(color=\"red\",size=2)+\n  geom_point()\nlayered"
  },
  {
    "objectID": "Basic_Visualization_concept.html#creating-a-scatter-plot",
    "href": "Basic_Visualization_concept.html#creating-a-scatter-plot",
    "title": "Making Plots with ggplot2",
    "section": "Creating a Scatter Plot",
    "text": "Creating a Scatter Plot\n\n\n\n\n\n\nAim:\n\n\n\nUnderstand the structure of a scatter plot using ggplot.\nAdjust point properties such as color, size, and transparency.\n\n\n\nsimple scatter plotcustomize the points\n\n\n\nggplot(data=df_und5, aes(x=date_tested, y= incidence))+ \n  geom_point()\n\n\n\n\n\n\n\nggplot(data=df_und5, aes(x=date_tested, y= incidence)) + \n  geom_point(colour=\"blue\",size=3.2,alpha=0.9, shape=2)\n\n\n\n\nbeing specific according to your data when customizing\n\nggplot(data=df,aes(x=date_tested,y=incidence))+\n  geom_point(aes(shape=age_group))\n\n\n\n\n\nggplot(data=df,aes(x=date_tested,y=incidence))+\n  geom_point(aes(size=incidence,shape=age_group))\n\n\n\n\n\n\n\nScatter plots are useful for visualizing the relationship between two continuous variables.\nIn this example, we’re using the geom_point() geometry to create a scatter plot.Each point represents a single data observation, with one variable plotted against the other.\nYou can customize various aspects of the scatter plot points using arguments within the geom_point() function.For example, you can change the color, size, and transparency of the points to highlight certain patterns or trends in the data.\n\n\n\n\n\n\nTutorial:\n\n\n\n\nWrite a code snippet to create a scatter plot as shown in the image below. (Hint: use the df dataset with changing color aesthentic)\n\n\n\nCreate a scatter plot for confirmed cases in the Y axis and date_tested x axis with shapes of age_group and size of confirmed cases"
  },
  {
    "objectID": "Basic_Visualization_concept.html#combination-of-line-and-scatter-plot",
    "href": "Basic_Visualization_concept.html#combination-of-line-and-scatter-plot",
    "title": "Making Plots with ggplot2",
    "section": "combination of line and scatter plot",
    "text": "combination of line and scatter plot\n\n\n\n\n\n\nAim:\n\n\n\nUnderstand how to combine line and scatter plots in ggplot. Visualize trends and individual data points simultaneously.\n\n\nCombining line and scatter plots allows you to display both trend information (through the line) and individual data points (through the scatter). This is useful for scenarios where you want to show both the overall trend and the variability of the data points around that trend.\n\n##line and point\nggplot(data=df_und5, aes(x=date_tested, y= incidence))+\n  geom_line(size=1,colour=\"red\")+\n  geom_point(colour=\"blue\",size=3.2,alpha=1.7, shape=2)\n\n\n\n\n\n\n\n\n\n\nTutorial:\n\n\n\n\nWrite a code snippet to create a combined plot showing confirmed cases. (Adjust the color of points to green and line to dashed)\nReplicate the following plot"
  },
  {
    "objectID": "Basic_Visualization_concept.html#customizing-plots-for-presentation-and-publication-purpose",
    "href": "Basic_Visualization_concept.html#customizing-plots-for-presentation-and-publication-purpose",
    "title": "Making Plots with ggplot2",
    "section": "Customizing plots for presentation and publication purpose",
    "text": "Customizing plots for presentation and publication purpose\n\n\n\n\n\n\nAim:\n\n\n\nLearn how to customize plots for presentation and publication. Adjust plot elements such as titles, labels, themes, and scales.\n\n\nCustomizing plots is essential for making them more visually appealing and informative for presentation or publication.\nElements such as titles, axis labels, and themes can be customized to enhance readability and aesthetics. Scales can be adjusted to ensure that the data is displayed in a clear and meaningful way.\n\nggplot(data=df_und5, aes(x=date_tested, y= incidence))+\n  geom_point(colour=\"blue\", size=3.2)+\n  geom_line()+\n  labs(x=\"Date\",y=\"Incidence for 100000/month\",title=\"Malaria Incidence in Mabangata region,2018\")+\n  theme_bw()+\n  theme(plot.title = element_text(hjust=0.5),\n        axis.text.x=element_text(angle=45,hjust=1))+\n  scale_x_date(date_breaks = \"1 month\", date_labels = \"%B\")\n\n\n\n\n\n\n\n\n\n\nTutorial:\n\n\n\ncreate the following plot"
  },
  {
    "objectID": "training_information.html",
    "href": "training_information.html",
    "title": "Training Information",
    "section": "",
    "text": "The goal of this workshop is to equip participants with the ability to recognize and produce data visualizations in accordance with the best practices of the field. Looking forward to meeting you all!"
  },
  {
    "objectID": "training_information.html#venue",
    "href": "training_information.html#venue",
    "title": "Training Information",
    "section": "Venue",
    "text": "Venue\nThe workshop takes place at the Kigali Marriott Hotel in Kigali, Rwanda on April 19th 2024. We will begin at 9:30am and finish at 1pm (see schedule below). If you have had any trouble with software installation, please arrive 15 minutes prior to the beginning of the session so we can assist you."
  },
  {
    "objectID": "training_information.html#before-the-workshop",
    "href": "training_information.html#before-the-workshop",
    "title": "Training Information",
    "section": "Before the Workshop",
    "text": "Before the Workshop\nPlease install R, RStudio, and the ggplot2 library following these installation instructions. If you have any trouble installing we will have a station on 18th April where you can come for assistance. Installation might take 15 minutes or more even on a good internet connection, so please install ahead of time!\nPlease also download the data we will be using for the workshop ahead of time. You should also receive this data as an attachment in your email. If you are having trouble downloading the data, please put a red sticky note on your computer and we will assist you.\n\n\n\n\n\n\nNote\n\n\n\n\nAll software used in this workshop is free.\nIf you have any difficulties with the installation, support can be provided on the first day of the AMMnet meeting, before the session, during breaks."
  },
  {
    "objectID": "training_information.html#friday-april-19th",
    "href": "training_information.html#friday-april-19th",
    "title": "Training Information",
    "section": "Friday April 19th",
    "text": "Friday April 19th\n\n\n\n\n\n\n\n\nTime\nSession\n\n\n\n\n\n15min before\nWelcome\nSupport for software installation\n\n\n\n9:30 - 9:50\nIntroduction to Data Visualization\n\n\n\n9:50-10:20\nIntroduction to RStudio, Reading Data, GGplot\n\n\n\n10:20-11:00\nLine Plots and Scatter Plots\n\n\n\n11-11:30\nCoffee Break\n\n\n\n11:30-12:10\nCombined Plot Types, Customizing Plots\n\n\n\n12:10-13:00\nConclusion and Survey"
  },
  {
    "objectID": "training_information.html#after-the-workshop",
    "href": "training_information.html#after-the-workshop",
    "title": "Training Information",
    "section": "After the Workshop",
    "text": "After the Workshop\nFill out the online post-workshop questionnaire"
  },
  {
    "objectID": "Getting_started_with_R.html",
    "href": "Getting_started_with_R.html",
    "title": "Installing/Updating R and RStudio",
    "section": "",
    "text": "R is a powerful programming language for statistical computing and graphics. It is one of main programming language used for data science (with other programming languages such as Python and Julia). The following instructions will show you how to install or update R on either a Windows or a Mac computer. Please complete all steps for your machine. If you have any trouble, please reach out to gshirima@ihi.or.tz or amelia.bertozzi-villa@gatesfoundation.org.\n\n\n\nStep 1Step 2Step 3Step 4Step 5Step 6\n\n\nDownload R\nVisit the Comprehensive R Archive Network (CRAN) to download R which is a network of servers around the world that store identical up-to-date versions of code and documentation for R. \n Scroll down the page to locate the mirror that is the closest to your geographic location and click on its URL.\n\n\n\n\n\n\nTip\n\n\n\nSelecting a mirror that is close to you may help speed up the download. You can still use another mirror since the closest geographic location does not always give the best mirror.\n\n\nFor instance, when downloading R from Rwanda, you can select the mirror from South Africa.\n\n\nChoose Your Operating System\nOnce on the CRAN page, select the operating system Windows. \n\n\n\nSelect binaries for base distribution\n\n\n\n\nDownload the Installer\nDownload the R installer (&lt; 80 MB)\n\n\n\n\nRun the Installer\nLocate the downloaded file in your computer’s Downloads folder and double-click to run the installation wizard.\n\n\n\n\nComplete Installation\nFollow the instruction in the installation wizard to complete the installation.\n\n\n\n\n\n\n\n\n\n\nStep 1Step 2Step 3Step 4Step 5\n\n\nDownload R\nVisit the Comprehensive R Archive Network (CRAN) to download R which is a network of servers around the world that store identical up-to-date versions of code and documentation for R. \n Scroll down the page to locate the mirror that is the closest to your geographic location and click on its URL.\n\n\n\n\n\n\nTip\n\n\n\nSelecting a mirror that is close to you may help speed up the download. You can still use another mirror since the closest geographic location does not always give the best mirror.\n\n\nFor instance, when downloading R from Rwanda, you can select the mirror from South Africa.\n\n\nChoose Your Operating System\nOnce on the CRAN page, select the operating system macOS. \n\n\n\nYou will be directed to a page that looks like this:\n\n\nYou must now select one of two binary packages to install, depending on the age of your computer. Go to the Apple icon in the top left corner of your Mac and select “About This Mac”.\n\n\nWhen you click, a small window will appear giving you information about your computer. Notice what is written next to the “Chip:” label:\n\n \nIf the chip is M1, M2, or M3, click the arm64.pkg installer on the R installation page. If the chip does not say M1, M2, or M3, clicke the x86_64.pkg installer.\n\n\nDownload the Installer\nDownload the R installer (~100 MB). When it has installed, click on it in your “Downloads” folder.\n\n\n\n\nRun the Installer\nLocate the downloaded file in your computer’s Downloads folder and double-click to run the installation wizard. When the installation is complete, you may be prompted to delete the installer file. If you are prompted, press “Yes”. If you are not prompted, you can delete the installer .pkg file manually."
  },
  {
    "objectID": "Getting_started_with_R.html#installing-r",
    "href": "Getting_started_with_R.html#installing-r",
    "title": "R an R Studio Installation",
    "section": "",
    "text": "R is a powerfull programming language for statistical computing and graphics. It is one of main programming language used for data science (with other programming languages such as Python and Julia).\n\nStep 1Step 2Step 3Step 4Step 5Step 6\n\n\nDOWNLOAD R\nVisit the Comprehensive R Archive Network (CRAN) to download R which is a network of servers around the world that store identical up-to-date versions of code and documentation for R. \n Scroll down the page to locate the mirror that is the closest to your geographic location and click on its URL.\n\n\n\n\n\n\nTip\n\n\n\nSelecting a mirror that is close to you may help speed up the download. You can still use another mirror since the closest geographic location does not always give the best mirror.\n\n\nFor instance, when downloading R from Rwanda, you can select the mirror from South Africa.\n\n\nCHOOSE YOUR OPERATION SYSTEM\nOnce on the CRAN page, select your operating system: Linux, macOS, or Windows. \n\n\n\nSelect binaries for base distribution\n\n\n\n\nDOWNLOAD THE INSTALLER\nDownload the R installer (&lt; 80 MB)\n\n\n\n\nRUN THE INSTALLER\nLocate the downloaded file in your computer’s Downloads folder and double-click to run the installation wizard.\n\n\n\n\nCOMPLETE INSTALLATION\nFollow the instruction in the installation wizard to complete the installation."
  },
  {
    "objectID": "Getting_started_with_R.html#install-and-setup-rstudio-desktop",
    "href": "Getting_started_with_R.html#install-and-setup-rstudio-desktop",
    "title": "R an R Studio Installation",
    "section": "",
    "text": "Rstudio is an integrated development environment (IDE) for R, providing a user-friendly interface for R programming.\n\n\n\n\n\n\nNote\n\n\n\nRStudio is moving away from its R-exclusive focus and becoming Posit in October 2022 to enable broader data science, scientific research, and technical communication functionalities and, in particular, to integrate Python users.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIn order for RStudio desktop to work with R you must have installed R on your computer, see Section A.1. RStudio does not include R when you download and install it.\n\n\n\nStep 1Step 2Step 3Step 4Step 5Step 6\n\n\nDOWNLOAD RStudio\nYou can download R from the RStudio website. There are different RStudio products available, but the free Desktop version offers all necessary features for your analyses.\n\n\n\nCHOOSE YOUR OPERATION SYSTEM\nDownload the RStudio Desktop installer compatible with your operating system.\n\n\n\nRUN THE INSTALLER\nLocate the downloaded file in your computer’s Downloads folder and double-click to run the setup.\n\n\n\nCOMPLETE INSTALLATION\nFollow the instruction in the installation wizard to complete the installation process.\n\n\n\nCONFIGURATION\nAfter installing RStudio, open the application. Navigate to Tools &gt; Global options to set your preferences.\n\n\n\nUnder the General options and the Basic tab:\nWorkspace\nUncheck Restore .RData into workspace at startup\nEnsure that Never is selected for Save workspace to .RData on exit.\nHistory\nUncheck Always save history (even when not saving .RData)\nUncheck Remove duplicate entries in history"
  },
  {
    "objectID": "Getting_started_with_R.html#installing-r-packages",
    "href": "Getting_started_with_R.html#installing-r-packages",
    "title": "R an R Studio Installation",
    "section": "",
    "text": "Note\n\n\n\nA R package is a collection of functions, data, and compiled code in a well-defined format, created to add specific functionality to R.\nThere are 10,000+ user contributed packages and growing.\nThere is a set of standard (or base) packages which is considered part of the R source code and automatically available as part of your R installation. Base packages contain the basic functions that allow R to work, and enable standard statistical and graphical functions on data sets.\n\n\n\nStep 1Step 2Step 3\n\n\nOpen RStudio on your computer\n\n\nIn RStudio, you can install a new package by selecting Tools &gt; Install packages… \n\n\nEnter the name of the package you want to install, or browse through available packages. Select the desired package(s) and click Install to add them to your R environment."
  },
  {
    "objectID": "index.html#venue",
    "href": "index.html#venue",
    "title": "Training Information",
    "section": "Venue",
    "text": "Venue\nThe workshop takes place at the Kigali Marriott Hotel in Kigali, Rwanda on April 19th 2024. We will begin at 9:30am and finish at 1pm (see schedule below). If you have had any trouble with software installation, please arrive 15 minutes prior to the beginning of the session so we can assist you."
  },
  {
    "objectID": "index.html#before-the-workshop",
    "href": "index.html#before-the-workshop",
    "title": "Training Information",
    "section": "Before the Workshop",
    "text": "Before the Workshop\nPlease install R, RStudio, and the tidyverse library following these installation instructions. If you have any trouble installing we will have a station on 18th April where you can come for assistance. Installation might take 15 minutes or more even on a good internet connection, so please install ahead of time!\n\n\n\n\n\n\nNote\n\n\n\n\nAll software used in this workshop is free.\nIf you have any difficulties with the installation, support can be provided on the first day of the AMMnet meeting, before the session, during breaks."
  },
  {
    "objectID": "index.html#schedule",
    "href": "index.html#schedule",
    "title": "Training Information",
    "section": "Schedule",
    "text": "Schedule\n\n\n\n\n\n\n\n\nTime\nSession\n\n\n\n\n\n9:15-9:30\nWelcome\nSupport for software installation\n\n\n\n9:30 - 9:50\nIntroduction to Data Visualization\n\n\n\n9:50-10:20\nIntroduction to RStudio, Reading Data, GGplot\n\n\n\n10:20-11:00\nLine Plots and Scatter Plots\n\n\n\n11-11:30\nCoffee Break\n\n\n\n11:30-12:10\nCombined Plot Types, Customizing Plots\n\n\n\n12:10-13:00\nConclusion and Survey"
  },
  {
    "objectID": "index.html#friday-april-19th",
    "href": "index.html#friday-april-19th",
    "title": "Training Information",
    "section": "",
    "text": "Table 1: Overview Schedule\n\n\n\n\n\n\n\nTime\nSession\n\n\n\n\n\n15min before\nWelcome\nSupport for software installation\n\n\n\n9:30 - 9:50\nIntroduction to data Visualization presentation\n\n\n\n9:50-10:20\nIntroduction to R Studio, Reading Data, GGplot\n\n\n\n10:20-11:00\nLine Plot, Scatter Plots and Exercise\n\n\n\n30min\ncoffee Break\n\n\n\n11:30-12:10\ncombination of line and Scatter & Exercise\n\n\n\n12:10-13:00\nWinding up session & survey filling"
  },
  {
    "objectID": "index.html#after-the-workshop",
    "href": "index.html#after-the-workshop",
    "title": "Training Information",
    "section": "After the Workshop",
    "text": "After the Workshop\nFill out the online post-workshop questionnaire"
  },
  {
    "objectID": "training_information.html#schedule",
    "href": "training_information.html#schedule",
    "title": "Training Information",
    "section": "Schedule",
    "text": "Schedule\n\n\n\n\n\n\n\n\nTime\nSession\n\n\n\n\n\n9:15-9:30\nWelcome\nSupport for software installation\n\n\n\n9:30 - 9:50\nIntroduction to Data Visualization\n\n\n\n9:50-10:05\nGetting Familiar with RStudio, Reading Data\n\n\n\n10:05-11:00\nIntroduction to ggplot2 and geoms\n\n\n\n11-11:30\nCoffee Break\n\n\n\n11:30-12:15\nMapping aesthetics: the aes() function\n\n\n\n12:15-12:45\nCustomizing Plots for Presentation & Publication\n\n\n\n12:45-13:00\nConclusion and Survey"
  },
  {
    "objectID": "Getting_started_with_R.html#on-windows",
    "href": "Getting_started_with_R.html#on-windows",
    "title": "Installing/Updating R and RStudio",
    "section": "",
    "text": "Step 1Step 2Step 3Step 4Step 5Step 6\n\n\nDownload R\nVisit the Comprehensive R Archive Network (CRAN) to download R which is a network of servers around the world that store identical up-to-date versions of code and documentation for R. \n Scroll down the page to locate the mirror that is the closest to your geographic location and click on its URL.\n\n\n\n\n\n\nTip\n\n\n\nSelecting a mirror that is close to you may help speed up the download. You can still use another mirror since the closest geographic location does not always give the best mirror.\n\n\nFor instance, when downloading R from Rwanda, you can select the mirror from South Africa.\n\n\nChoose Your Operating System\nOnce on the CRAN page, select the operating system Windows. \n\n\n\nSelect binaries for base distribution\n\n\n\n\nDownload the Installer\nDownload the R installer (&lt; 80 MB)\n\n\n\n\nRun the Installer\nLocate the downloaded file in your computer’s Downloads folder and double-click to run the installation wizard.\n\n\n\n\nComplete Installation\nFollow the instruction in the installation wizard to complete the installation."
  },
  {
    "objectID": "Getting_started_with_R.html#on-macos",
    "href": "Getting_started_with_R.html#on-macos",
    "title": "Installing/Updating R and RStudio",
    "section": "",
    "text": "Step 1Step 2Step 3Step 4Step 5\n\n\nDownload R\nVisit the Comprehensive R Archive Network (CRAN) to download R which is a network of servers around the world that store identical up-to-date versions of code and documentation for R. \n Scroll down the page to locate the mirror that is the closest to your geographic location and click on its URL.\n\n\n\n\n\n\nTip\n\n\n\nSelecting a mirror that is close to you may help speed up the download. You can still use another mirror since the closest geographic location does not always give the best mirror.\n\n\nFor instance, when downloading R from Rwanda, you can select the mirror from South Africa.\n\n\nChoose Your Operating System\nOnce on the CRAN page, select the operating system macOS. \n\n\n\nYou will be directed to a page that looks like this:\n\n\nYou must now select one of two binary packages to install, depending on the age of your computer. Go to the Apple icon in the top left corner of your Mac and select “About This Mac”.\n\n\nWhen you click, a small window will appear giving you information about your computer. Notice what is written next to the “Chip:” label:\n\n \nIf the chip is M1, M2, or M3, click the arm64.pkg installer on the R installation page. If the chip does not say M1, M2, or M3, clicke the x86_64.pkg installer.\n\n\nDownload the Installer\nDownload the R installer (~100 MB). When it has installed, click on it in your “Downloads” folder.\n\n\n\n\nRun the Installer\nLocate the downloaded file in your computer’s Downloads folder and double-click to run the installation wizard. When the installation is complete, you may be prompted to delete the installer file. If you are prompted, press “Yes”. If you are not prompted, you can delete the installer .pkg file manually."
  },
  {
    "objectID": "Getting_started_with_R.html#using-the-graphic-interface",
    "href": "Getting_started_with_R.html#using-the-graphic-interface",
    "title": "Installing/Updating R and RStudio",
    "section": "Using the Graphic Interface",
    "text": "Using the Graphic Interface\n\nStep 1Step 2Step 3\n\n\nOpen RStudio on your computer.\n\n\nIn RStudio, you can install a new package by selecting Tools &gt; Install packages… \n\n\nEnter the name of the package you want to install, or browse through available packages. Select the desired package(s) and click Install to add them to your R environment."
  },
  {
    "objectID": "Getting_started_with_R.html#using-the-rstudio-console",
    "href": "Getting_started_with_R.html#using-the-rstudio-console",
    "title": "Installing/Updating R and RStudio",
    "section": "Using the RStudio Console",
    "text": "Using the RStudio Console\n\nStep 1Step 2Step 3Step 4\n\n\nOpen RStudio on your computer.\n\n\nIn the “Console” tab (at the bottom left of the screen if using the default settings), type install.packages(\"PACKAGE_NAME\"), with the name of the package instead of the letters “PACKAGE_NAME”. Don’t forget the quotation marks! For example, to install the tidyverse package, type install.packages(\"tidyverse\"):\n\n\n\nYou should see a series of text scrolling down the screen (there might be a lot!), followed by a message saying that “the downloaded binary packages are in [location]”.\n\n\n\n\n\n\nTip\n\n\n\nThere should not be any error messages in this process! If you run into errors, try installing via the user interface. If there are still problems, contact the AMMnet team for support.\n\n\n\n\n\nTest the successful installation by “loading” the package into the console.\nType the words find.package(\"PACKAGE_NAME\") into the console. If the package installed successfully, you should see a filepath to the location of the package. If the package didn’t install successfully, you’ll see an error message. Below, you can see an example with a successfully installed package (tidyverse) and a package that has not been installed (fake_package).\n\n\n\n\n\n\nTip\n\n\n\nIf you run into errors, try installing via the user interface. If there are still problems, contact the AMMnet team for support."
  },
  {
    "objectID": "Basic_Visualization_concept.html#main-objective",
    "href": "Basic_Visualization_concept.html#main-objective",
    "title": "Making Plots with ggplot2",
    "section": "",
    "text": "At the end of the training we will be able to produce this plot:"
  },
  {
    "objectID": "Basic_Visualization_concept.html#ggplot2-a-layered-approach-to-plotting",
    "href": "Basic_Visualization_concept.html#ggplot2-a-layered-approach-to-plotting",
    "title": "Making Plots with ggplot2",
    "section": "ggplot2: A Layered Approach to Plotting",
    "text": "ggplot2: A Layered Approach to Plotting\n\n\n\n\n\n\nAim:\n\n\n\n\nLearn about the layered approach of ggplot.\nUnderstand how each layer adds elements to the plot.\n\n\n\nThe ggplot library is a powerful tool for creating data visualizations in R. It follows a layered approach to building plots, where each layer adds additional elements to the plot. Understanding how ggplot works can help you create sophisticated and informative visualizations.\nIn ggplot, you start with a base plot and add layers called “geometries”, or geoms. Each layer in ggplot adds a different aspect to the plot, allowing you to customize and enhance the visualization. Once geoms have been added, labels and other customizations can be added in a similar way.\n\nBase Plot: No InformationBase Plot: With DataBase Plot: With x and yAdding PointsAdding Lines\n\n\nEvery plot in ggplot starts with the function ggplot. With no additional information about what to display, it will simply show a grey box:\n\nggplot()\n\n\n\n\n\n\nThe ggplot function must include an argument to the dataset we want to plot. Here, we specify that we want to use the df_und5 dataset. But because we have not told the function which columns to plot, it will still only show a grey box:\n\nggplot(data = df_und5)\n\n\n\n\n\n\nLet’s say we want to plot the date_tested and incidence columns, with date_tested on the x axis and incidence on the y axis. For this, we have to use a function called aes(). We’ll explain it later, but for now just type in the code. Now, on top of our grey box, there is a layer showing some line breaks and labels mapping our x and y variables. Progress!\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence))\n\n\n\n\n\n\nNow we’re finally ready to add shapes to our plot using geoms. If we want to represent this data using points we use the function geom_point():\n\nggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_point()\n\n\n\n\n\n\nAs an additional layer on top of this, we use the function geom_line() to add a line plot:\n\nggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_point() +\n  geom_line()\n\n\n\n\n\n\n\nThe order in which you append your geoms to the main ggplot function matters: whatever you list first will go underneath whatever comes next. For example, observe the difference between these two pieces of code and the plots they produce:\n\nggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_line(size=2) +\n  geom_point(colour=\"red\", size=4) \n\n\n\nggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_point(colour=\"red\", size=4) +\n  geom_line(size=2)\n\n\n\n\n\n\n\n\n\n\nNote:\n\n\n\nIt’s easy and fun to switch layers around in ggplot, but watch out for any dangling + signs at the end of your plots! If you leave a + dangling at the end like this, your code will think that you’re still typing your command and won’t show your plot:\nggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_line(size=2) +\n  geom_point(colour=\"red\", size=4) +\nConversely, if you miss a + in the middle, your code will only show you the first part of your plot, then throw an error:\nggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_line(size=2) \n  geom_point(colour=\"red\", size=4) \n\n\n\n\n\n\n\n\nExercise\n\n\n\nChange the code below so that the orange points are in front of the blue lines. Watch out for any missing or dangling + signs!\n\nggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_point(colour=\"orange\", size=4) + \n  geom_line(colour=\"blue\", size=2) \n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_line(colour=\"blue\", size=2) +\n  geom_point(colour=\"orange\", size=4)"
  },
  {
    "objectID": "Basic_Visualization_concept.html#mapping-aesthetics-with-the-aes-function",
    "href": "Basic_Visualization_concept.html#mapping-aesthetics-with-the-aes-function",
    "title": "Making Plots with ggplot2",
    "section": "Mapping Aesthetics with the aes() Function",
    "text": "Mapping Aesthetics with the aes() Function\n\n\n\n\n\n\nAim:\n\n\n\n\nUnderstand the role of the aes function in ggplot.\nLearn when to use aes to map variables to aesthetics.\n\n\n\nIn the presentation, we learned that all visualizations are mappings of information from abstract numbers into visual concepts like location, shape, color, etc.\nThe aes() function is used whenever we want to map variables in our dataset to aesthetic properties such as x and y axes, colors, shapes, etc. It is one of the most confusing aspects of ggplot, but also one of the most powerful once you get used to it.\n\nx and y\naes() can take many arguments (see the documentation for a full list), but you’ve already seen the most crucial ones: x and y. These arguments are always necessary for ggplot to understand which variables to show on the two-dimensional screen.\n\nSwitching x and yDifferent x and y\n\n\nthe aes in the base position and altering the variables of x axis and y axis\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence)) +\n    geom_point()\n\n\n\n\n\nggplot(data = df_und5, aes(x = incidence, y = date_tested,)) +\n    geom_point()\n\n\n\n\n\n\n\nggplot(data = df_und5, aes(x = date_tested, y = pop)) +\n    geom_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nCreate a scatter plot using the df_und5 dataset, with date (date_tested) on the x axis and confirmed cases (conf) on the y axis.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nggplot(data = df_und5, aes(x = date_tested, y = conf)) +\n    geom_point()\n\n\n\n\n\n\n\n\n\nColor\nTo understand mappings beyond x and y, let’s move away from the df_und5 dataset and start using the full df dataset. We can start with a simple scatter plot:\n\nggplot(data = df, aes(x = date_tested, y = incidence)) +\n  geom_point( )\n\n\n\n\nNow, instead of a single time series, we have three time series: one for each age group. But it’s hard to differentiate them right now because they’re all the same shape and size. It would be nice if we could make each age group a different color, using the age_group column name. How do you think we could do this?\nLet’s try a few options:\nggplot(data = df, aes(x = date_tested, y = incidence)) +\n  geom_point(colour=age_group)\nggplot(data = df, aes(x = date_tested, y = incidence)) +\n  geom_point(colour=\"age_group\")\nNeither of these works, because we are mapping a variable in our dataset to a feature of our plot (here, color). So we need to put color inside an aes() function within our geom:\n\nggplot(data = df, aes(x = date_tested, y = incidence)) +\n  geom_point(aes(colour=age_group))\n\n\n\n\nA ton of cool things just happened! Ggplot turned each age group a different color, picked some nice default colors, and gave us a helpful legend. We can do the same with a line plot:\n\nggplot(data = df, aes(x = date_tested, y = incidence)) +\n  geom_line(aes(colour=age_group))\n\n\n\n\n\n\nOther Aesthetics\nWe can take any of the variables we used outside of aes and map them to variables inside of aes:\n\nColorShapeSizeLinetype\n\n\n\nggplot(data = df, aes(x = date_tested, y = incidence)) +\n  geom_point(aes(colour=age_group))\n\n\n\n\n\n\n\nggplot(data=df,aes(x=date_tested,y=incidence))+\n  geom_point(aes(shape=age_group))\n\n\n\n\n\n\n\nggplot(data=df,aes(x=date_tested,y=incidence))+\n  geom_point(aes(size=age_group))\n\n\n\n\n\n\n\nggplot(data=df,aes(x=date_tested,y=incidence))+\n  geom_line(aes(linetype=age_group))\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise:\n\n\n\nCreate the following plot: \n\n\n\n\n\n\n\n\nSolution:\n\n\n\n\n\n\nggplot(data=df,aes(x=date_tested,y=incidence))+\n  geom_line(aes(size=age_group))\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWhen you map a color to a continuous variable instead of a categorical one, the color scheme changes to something continuous:\n\nggplot(data = df, aes(x = date_tested, y = incidence, color = incidence)) +\n  geom_point()\n\n\n\n\nThere are many, many ways to customize the colors of your plots. Going into detail is beyond the scope of this workshop."
  },
  {
    "objectID": "Basic_Visualization_concept.html#line-plots",
    "href": "Basic_Visualization_concept.html#line-plots",
    "title": "Making Plots with ggplot2",
    "section": "Line Plots",
    "text": "Line Plots\n\n\n\n\n\n\nAim:\n\n\n\n\nCreate a basic line plot using ggplot.\nElaborate the additional group=1 aesthetic\nExplore customization options by adjusting line properties such as size, color, and line type.\n\n\n\n\nsimple line plotcustomize the line\n\n\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence)) +\n    geom_line( )\n\n\n\n\n\nggplot(data = df_und5, aes(x = date_tested, y = conf)) +\n    geom_line( )\n\n\n\n\n\n\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence))+ \n  geom_line(size=1,colour=\"blue\",linetype=\"dashed\")\n\n\n\n\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence))+ \n  geom_line(size=2,colour=\"blue\",linetype=\"dotted\")\n\n\n\n\n\n\n\nIn this example, we’re using the geom_line() geometry to create a line plot.\nWe specify the x-axis variable (date_tested) and the y-axis variable (incidence) within the aes() function. This creates a line plot showing how the incidence variable changes over time.\nYou can customize various aspects of the line plot using arguments within the geom_line() function. For example, you can change the size of the line, its color, and even its line type (“blank”, “solid”, “dashed”, “dotted”, “dotdash”, “longdash”, and “twodash”). These customizations help to improve the readability and aesthetics of the plot.\n\n\n\n\n\n\nTutorial:\n\n\n\nWrite a code snippet to create a basic line plot to visualize population, then customize the appearance of the line color to a red dashed line (Hint: use a df_und5 data).\n\n\n\n\n\n\n\n\nBack to Layering\n\n\n\nOn changing the size of line to see how points cant be visible\n\nggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_point() +\n  geom_line(color=\"red\",size=2)\n\n\n\n\non the improvement of the previous then\n\nlayered&lt;- ggplot(data= df_und5,aes(x=date_tested,y=incidence))+\n  geom_line(color=\"red\",size=2)+\n  geom_point()\nlayered"
  },
  {
    "objectID": "Basic_Visualization_concept.html#scatter-plots",
    "href": "Basic_Visualization_concept.html#scatter-plots",
    "title": "Making Plots with ggplot2",
    "section": "Scatter Plots",
    "text": "Scatter Plots\n\n\n\n\n\n\nAim:\n\n\n\nUnderstand the structure of a scatter plot using ggplot.\nAdjust point properties such as color, size, and transparency.\n\n\n\nsimple scatter plotcustomize the points\n\n\n\nggplot(data=df_und5, aes(x=date_tested, y= incidence))+ \n  geom_point()\n\n\n\n\n\n\n\nggplot(data=df_und5, aes(x=date_tested, y= incidence)) + \n  geom_point(colour=\"blue\",size=3.2,alpha=0.9, shape=2)\n\n\n\n\nbeing specific according to your data when customizing\n\nggplot(data=df,aes(x=date_tested,y=incidence))+\n  geom_point(aes(size=incidence,shape=age_group))\n\n\n\n\n\n\n\nScatter plots are useful for visualizing the relationship between two continuous variables.\nIn this example, we’re using the geom_point() geometry to create a scatter plot.Each point represents a single data observation, with one variable plotted against the other.\nYou can customize various aspects of the scatter plot points using arguments within the geom_point() function.For example, you can change the color, size, and transparency of the points to highlight certain patterns or trends in the data.\n\n\n\n\n\n\nTutorial:\n\n\n\n\nWrite a code snippet to create a scatter plot as shown in the image below. (Hint: use the df dataset with changing color aesthentic)\n\n\n\nCreate a scatter plot for confirmed cases in the Y axis and date_tested x axis with shapes of age_group and size of confirmed cases"
  },
  {
    "objectID": "Basic_Visualization_concept.html#layering-line-and-scatter-plots",
    "href": "Basic_Visualization_concept.html#layering-line-and-scatter-plots",
    "title": "Making Plots with ggplot2",
    "section": "Layering Line and Scatter Plots",
    "text": "Layering Line and Scatter Plots\n\n\n\n\n\n\nAim:\n\n\n\nUnderstand how to combine line and scatter plots in ggplot. Visualize trends and individual data points simultaneously.\n\n\nCombining line and scatter plots allows you to display both trend information (through the line) and individual data points (through the scatter). This is useful for scenarios where you want to show both the overall trend and the variability of the data points around that trend.\n\n##line and point\nggplot(data=df_und5, aes(x=date_tested, y= incidence))+\n  geom_line(size=1,colour=\"red\")+\n  geom_point(colour=\"blue\",size=3.2,alpha=1.7, shape=2)\n\n\n\n\n\n\n\n\n\n\nTutorial:\n\n\n\n\nWrite a code snippet to create a combined plot showing confirmed cases. (Adjust the color of points to green and line to dashed)\nReplicate the following plot"
  },
  {
    "objectID": "Basic_Visualization_concept.html#customizing-plots-for-presentation-and-publication",
    "href": "Basic_Visualization_concept.html#customizing-plots-for-presentation-and-publication",
    "title": "Making Plots with ggplot2",
    "section": "Customizing Plots for Presentation and Publication",
    "text": "Customizing Plots for Presentation and Publication\n\n\n\n\n\n\nAim:\n\n\n\nLearn how to customize plots for presentation and publication. Adjust plot elements such as titles, labels, themes, and scales.\n\n\nWith our last exercise, we almost created our goal plot for the session:\n\nggplot(data=df,aes(x=date_tested,y=incidence)) +\n  geom_line(aes(color=age_group)) +\n  geom_point()\n\n\n\n\nAll that’s left to do is adjust the themes and labeling.\nCustomizing plots is essential for making them more visually appealing and informative for presentation or publication.\nElements such as titles, axis labels, and themes can be customized to enhance readability and aesthetics. Scales can be adjusted to ensure that the data is displayed in a clear and meaningful way.\n\nThemeTitle and Axis Labels\n\n\nThere are a number of different built-in themes you can select to modify the background color and overall appearance of your plot.\n\nggplot(data=df,aes(x=date_tested, y= incidence))+\n  geom_line(aes(color=age_group)) +\n  geom_point() +\n  theme_dark()\n\n\n\n\n\nggplot(data=df,aes(x=date_tested, y= incidence))+\n  geom_line(aes(color=age_group)) +\n  geom_point() +\n  theme_bw()\n\n\n\n\n\n\nYou can use the labs function to modify the axis labels, legend labels, and title:\n\nggplot(data=df,aes(x=date_tested, y= incidence))+\n  geom_line(aes(color=age_group)) +\n  geom_point() +\n  labs(x=\"Month\", \n       y=\"Incidence\") \n\n\n\n\n\nggplot(data=df,aes(x=date_tested, y= incidence))+\n  geom_line(aes(color=age_group)) +\n  geom_point() +\n  labs(x=\"Month\", \n       y=\"Incidence\",\n       title=\"Malaria 2018\",\n       color=\"Age Group\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise:\n\n\n\nCreate the following plot:\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nggplot(data=df,aes(x=date_tested, y= incidence))+\n  geom_line(aes(color=age_group)) +\n  geom_point()+\n  labs(x=\"Month\", \n       y=\"Incidence (Cases/100,000)\",\n       title=\"Malaria Incidence, Mabangata Region, 2018\",\n       colour=\"Age Group\") +\n  theme_bw() \n\n\n\n\n\n\n\nAnd there it is! We’ve gone from a set of numbers on a page to a nice, polished figure ready for a presentation.\nWe’ve only scratched the surface of what you can do with ggplot2 today, but we hope we’ve given you a strong basis and you’ll be able to learn more in the future!"
  },
  {
    "objectID": "Basic_Visualization_concept.html#customizing-geoms",
    "href": "Basic_Visualization_concept.html#customizing-geoms",
    "title": "Making Plots with ggplot2",
    "section": "Customizing geoms",
    "text": "Customizing geoms\n\n\n\n\n\n\nAim:\n\n\n\n\nAdjust the color, size, shape, and linetype of geom features\n\n\n\nAs we’ve hinted at already in the plots above, you can change the features of your geoms by adding arguments inside of their specific functions. You can see the defaults if you enter these geoms with no additonal arguments:\n\nggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_line() + \n  geom_point() \n\n\n\n\nSome features, such as color and size, are used by both geom_point() and geom_line():\n\nggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_line(colour=\"blue\", size=2) \n\n\n\nggplot(data=df_und5, aes(x=date_tested, y=incidence)) +\n  geom_point(colour=\"blue\", size=2)  \n\n\n\n\nOthers are specific to specific geoms, as in the examples below:\n\nlinetype for Linesshape for Points\n\n\nOptions include “blank”, “solid”, “dashed”, “dotted”, “dotdash”, “longdash”, and “twodash”.\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence))+ \n  geom_line(colour=\"blue\", size=2, linetype=\"dashed\")\n\n\n\n\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence))+ \n  geom_line(colour=\"red\",size=3,linetype=\"dotted\")\n\n\n\n\n\n\nShapes can take any number from 1 to 25.\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence))+ \n  geom_point(colour=\"blue\", size=2, shape=2)\n\n\n\n\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence))+ \n  geom_point(colour=\"red\", size=3, shape=4)\n\n\n\n\n\n\n\nYou can layer these as before:\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence))+ \n  geom_line(colour=\"blue\",size=2,linetype=\"dotted\") +\n  geom_point(colour=\"red\", size=3, shape=4)\n\n\n\n\n\n\n\n\n\n\nExercise:\n\n\n\nModify the code below so that:\n\nthe line is orange, dashed, and size 2\nthe points are green, shape 16, and size 4\n\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence))+ \n  geom_line(colour=\"blue\",size=2,linetype=\"dotted\") +\n  geom_point(colour=\"red\", size=3, shape=4)\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nggplot(data = df_und5, aes(x = date_tested, y = incidence))+ \n  geom_line(colour=\"orange\",size=2,linetype=\"dashed\") +\n  geom_point(colour=\"green\", size=4, shape=16)"
  },
  {
    "objectID": "Basic_Visualization_concept.html#mixing-and-matching-aesthetics",
    "href": "Basic_Visualization_concept.html#mixing-and-matching-aesthetics",
    "title": "Making Plots with ggplot2",
    "section": "Mixing and Matching Aesthetics",
    "text": "Mixing and Matching Aesthetics\nYou can put multiple aesthetics inside of one aes function:\n\nSame VariableDifferent VariablesDifferent Variables in Different geoms\n\n\n\nggplot(data=df,aes(x=date_tested,y=incidence))+\n  geom_point(aes(size=age_group, colour=age_group))\n\n\n\n\n\n\n\nggplot(data=df,aes(x=date_tested,y=incidence))+\n  geom_point(aes(size=incidence, shape=age_group))\n\n\n\n\n\n\n\nggplot(data=df,aes(x=date_tested,y=incidence)) +\n  geom_line(aes(colour=age_group)) +\n  geom_point(aes(size=incidence, shape=age_group))\n\n\n\n\n\n\n\n\n\n\nExercise:\n\n\n\nIn the plot above, why are the points black instead of in color?\n\n\n\n\n\n\n\n\n\n\n\nExercise:\n\n\n\n\nWrite a code snippet to create the following plot:\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nggplot(data=df,aes(x=date_tested,y=incidence)) +\n  geom_line(aes(linetype=age_group)) +\n  geom_point(aes(color=age_group))\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise:\n\n\n\n\nWrite a code snippet to create the following plot:\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nggplot(data=df,aes(x=date_tested,y=incidence)) +\n  geom_line(aes(color=age_group)) +\n  geom_point()"
  },
  {
    "objectID": "Basic_Visualization_concept.html#solution-2",
    "href": "Basic_Visualization_concept.html#solution-2",
    "title": "Making Plots with ggplot2",
    "section": "Solution",
    "text": "Solution\n\nggplot(data=df,aes(x=date_tested,y=incidence)) +\n  geom_line(aes(linetype=age_group)) +\n  geom_point(aes(color=age_group))"
  },
  {
    "objectID": "Basic_Visualization_concept.html#solution-3",
    "href": "Basic_Visualization_concept.html#solution-3",
    "title": "Making Plots with ggplot2",
    "section": "Solution",
    "text": "Solution\n\nggplot(data=df,aes(x=date_tested,y=incidence)) +\n  geom_line(aes(color=age_group)) +\n  geom_point()"
  }
]